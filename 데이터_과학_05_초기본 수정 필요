{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "ir",
      "display_name": "R"
    },
    "language_info": {
      "name": "R"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ys-0205/-/blob/main/%EB%8D%B0%EC%9D%B4%ED%84%B0_%EA%B3%BC%ED%95%99_05_%EC%B4%88%EA%B8%B0%EB%B3%B8%20%EC%88%98%EC%A0%95%20%ED%95%84%EC%9A%94\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 5장 데이터 가공"
      ],
      "metadata": {
        "id": "lpZAnlgW8PYJ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 02 base R을 이용한 데이터 가공"
      ],
      "metadata": {
        "id": "sRQYbifP8TWs"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### gapminder 라이브러리"
      ],
      "metadata": {
        "id": "ps67pyjEKhbl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "install.packages(\"gapminder\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EzoO4EEbtXKD",
        "outputId": "09044895-82fd-4b5d-98b0-f8b956c25cbb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Installing package into ‘/usr/local/lib/R/site-library’\n",
            "(as ‘lib’ is unspecified)\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "library(gapminder)\n",
        "library(dplyr)\n",
        "glimpse(gapminder)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hXez06yQ8QQ4",
        "outputId": "2f46a04e-1531-4e48-dfa5-9f6fefc7539e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Rows: 1,704\n",
            "Columns: 6\n",
            "$ country   \u001b[3m\u001b[90m<fct>\u001b[39m\u001b[23m \"Afghanistan\"\u001b[90m, \u001b[39m\"Afghanistan\"\u001b[90m, \u001b[39m\"Afghanistan\"\u001b[90m, \u001b[39m\"Afghanistan\"\u001b[90m, \u001b[39m…\n",
            "$ continent \u001b[3m\u001b[90m<fct>\u001b[39m\u001b[23m Asia\u001b[90m, \u001b[39mAsia\u001b[90m, \u001b[39mAsia\u001b[90m, \u001b[39mAsia\u001b[90m, \u001b[39mAsia\u001b[90m, \u001b[39mAsia\u001b[90m, \u001b[39mAsia\u001b[90m, \u001b[39mAsia\u001b[90m, \u001b[39mAsia\u001b[90m, \u001b[39mAsia\u001b[90m, \u001b[39m…\n",
            "$ year      \u001b[3m\u001b[90m<int>\u001b[39m\u001b[23m 1952\u001b[90m, \u001b[39m1957\u001b[90m, \u001b[39m1962\u001b[90m, \u001b[39m1967\u001b[90m, \u001b[39m1972\u001b[90m, \u001b[39m1977\u001b[90m, \u001b[39m1982\u001b[90m, \u001b[39m1987\u001b[90m, \u001b[39m1992\u001b[90m, \u001b[39m1997\u001b[90m, \u001b[39m…\n",
            "$ lifeExp   \u001b[3m\u001b[90m<dbl>\u001b[39m\u001b[23m 28.801\u001b[90m, \u001b[39m30.332\u001b[90m, \u001b[39m31.997\u001b[90m, \u001b[39m34.020\u001b[90m, \u001b[39m36.088\u001b[90m, \u001b[39m38.438\u001b[90m, \u001b[39m39.854\u001b[90m, \u001b[39m40.8…\n",
            "$ pop       \u001b[3m\u001b[90m<int>\u001b[39m\u001b[23m 8425333\u001b[90m, \u001b[39m9240934\u001b[90m, \u001b[39m10267083\u001b[90m, \u001b[39m11537966\u001b[90m, \u001b[39m13079460\u001b[90m, \u001b[39m14880372\u001b[90m, \u001b[39m12…\n",
            "$ gdpPercap \u001b[3m\u001b[90m<dbl>\u001b[39m\u001b[23m 779.4453\u001b[90m, \u001b[39m820.8530\u001b[90m, \u001b[39m853.1007\u001b[90m, \u001b[39m836.1971\u001b[90m, \u001b[39m739.9811\u001b[90m, \u001b[39m786.1134\u001b[90m, \u001b[39m…\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###샘플과 속성의 추출"
      ],
      "metadata": {
        "id": "Z134TD3SvJ7g"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#각나라의 기대수명\n",
        "print(gapminder[, c(\"country\", \"lifeExp\")])"
      ],
      "metadata": {
        "id": "uC2BUhte8SX6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "26cfae32-775f-48e8-8ae7-ae3fdce0eb81"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[90m# A tibble: 1,704 × 2\u001b[39m\n",
            "   country     lifeExp\n",
            "   \u001b[3m\u001b[90m<fct>\u001b[39m\u001b[23m         \u001b[3m\u001b[90m<dbl>\u001b[39m\u001b[23m\n",
            "\u001b[90m 1\u001b[39m Afghanistan    28.8\n",
            "\u001b[90m 2\u001b[39m Afghanistan    30.3\n",
            "\u001b[90m 3\u001b[39m Afghanistan    32.0\n",
            "\u001b[90m 4\u001b[39m Afghanistan    34.0\n",
            "\u001b[90m 5\u001b[39m Afghanistan    36.1\n",
            "\u001b[90m 6\u001b[39m Afghanistan    38.4\n",
            "\u001b[90m 7\u001b[39m Afghanistan    39.9\n",
            "\u001b[90m 8\u001b[39m Afghanistan    40.8\n",
            "\u001b[90m 9\u001b[39m Afghanistan    41.7\n",
            "\u001b[90m10\u001b[39m Afghanistan    41.8\n",
            "\u001b[90m# ℹ 1,694 more rows\u001b[39m\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(gapminder[, c(\"country\", \"lifeExp\", \"year\")])"
      ],
      "metadata": {
        "id": "Gs2sc3foBY1X",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3e0c3597-c44d-4474-8bef-ba4089d859f7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[90m# A tibble: 1,704 × 3\u001b[39m\n",
            "   country     lifeExp  year\n",
            "   \u001b[3m\u001b[90m<fct>\u001b[39m\u001b[23m         \u001b[3m\u001b[90m<dbl>\u001b[39m\u001b[23m \u001b[3m\u001b[90m<int>\u001b[39m\u001b[23m\n",
            "\u001b[90m 1\u001b[39m Afghanistan    28.8  \u001b[4m1\u001b[24m952\n",
            "\u001b[90m 2\u001b[39m Afghanistan    30.3  \u001b[4m1\u001b[24m957\n",
            "\u001b[90m 3\u001b[39m Afghanistan    32.0  \u001b[4m1\u001b[24m962\n",
            "\u001b[90m 4\u001b[39m Afghanistan    34.0  \u001b[4m1\u001b[24m967\n",
            "\u001b[90m 5\u001b[39m Afghanistan    36.1  \u001b[4m1\u001b[24m972\n",
            "\u001b[90m 6\u001b[39m Afghanistan    38.4  \u001b[4m1\u001b[24m977\n",
            "\u001b[90m 7\u001b[39m Afghanistan    39.9  \u001b[4m1\u001b[24m982\n",
            "\u001b[90m 8\u001b[39m Afghanistan    40.8  \u001b[4m1\u001b[24m987\n",
            "\u001b[90m 9\u001b[39m Afghanistan    41.7  \u001b[4m1\u001b[24m992\n",
            "\u001b[90m10\u001b[39m Afghanistan    41.8  \u001b[4m1\u001b[24m997\n",
            "\u001b[90m# ℹ 1,694 more rows\u001b[39m\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(gapminder[1:15, ])"
      ],
      "metadata": {
        "id": "UhvIdDmdHxFA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "aea689db-dbea-4c1e-afe5-54a920e62f26"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[90m# A tibble: 15 × 6\u001b[39m\n",
            "   country     continent  year lifeExp      pop gdpPercap\n",
            "   \u001b[3m\u001b[90m<fct>\u001b[39m\u001b[23m       \u001b[3m\u001b[90m<fct>\u001b[39m\u001b[23m     \u001b[3m\u001b[90m<int>\u001b[39m\u001b[23m   \u001b[3m\u001b[90m<dbl>\u001b[39m\u001b[23m    \u001b[3m\u001b[90m<int>\u001b[39m\u001b[23m     \u001b[3m\u001b[90m<dbl>\u001b[39m\u001b[23m\n",
            "\u001b[90m 1\u001b[39m Afghanistan Asia       \u001b[4m1\u001b[24m952    28.8  8\u001b[4m4\u001b[24m\u001b[4m2\u001b[24m\u001b[4m5\u001b[24m333      779.\n",
            "\u001b[90m 2\u001b[39m Afghanistan Asia       \u001b[4m1\u001b[24m957    30.3  9\u001b[4m2\u001b[24m\u001b[4m4\u001b[24m\u001b[4m0\u001b[24m934      821.\n",
            "\u001b[90m 3\u001b[39m Afghanistan Asia       \u001b[4m1\u001b[24m962    32.0 10\u001b[4m2\u001b[24m\u001b[4m6\u001b[24m\u001b[4m7\u001b[24m083      853.\n",
            "\u001b[90m 4\u001b[39m Afghanistan Asia       \u001b[4m1\u001b[24m967    34.0 11\u001b[4m5\u001b[24m\u001b[4m3\u001b[24m\u001b[4m7\u001b[24m966      836.\n",
            "\u001b[90m 5\u001b[39m Afghanistan Asia       \u001b[4m1\u001b[24m972    36.1 13\u001b[4m0\u001b[24m\u001b[4m7\u001b[24m\u001b[4m9\u001b[24m460      740.\n",
            "\u001b[90m 6\u001b[39m Afghanistan Asia       \u001b[4m1\u001b[24m977    38.4 14\u001b[4m8\u001b[24m\u001b[4m8\u001b[24m\u001b[4m0\u001b[24m372      786.\n",
            "\u001b[90m 7\u001b[39m Afghanistan Asia       \u001b[4m1\u001b[24m982    39.9 12\u001b[4m8\u001b[24m\u001b[4m8\u001b[24m\u001b[4m1\u001b[24m816      978.\n",
            "\u001b[90m 8\u001b[39m Afghanistan Asia       \u001b[4m1\u001b[24m987    40.8 13\u001b[4m8\u001b[24m\u001b[4m6\u001b[24m\u001b[4m7\u001b[24m957      852.\n",
            "\u001b[90m 9\u001b[39m Afghanistan Asia       \u001b[4m1\u001b[24m992    41.7 16\u001b[4m3\u001b[24m\u001b[4m1\u001b[24m\u001b[4m7\u001b[24m921      649.\n",
            "\u001b[90m10\u001b[39m Afghanistan Asia       \u001b[4m1\u001b[24m997    41.8 22\u001b[4m2\u001b[24m\u001b[4m2\u001b[24m\u001b[4m7\u001b[24m415      635.\n",
            "\u001b[90m11\u001b[39m Afghanistan Asia       \u001b[4m2\u001b[24m002    42.1 25\u001b[4m2\u001b[24m\u001b[4m6\u001b[24m\u001b[4m8\u001b[24m405      727.\n",
            "\u001b[90m12\u001b[39m Afghanistan Asia       \u001b[4m2\u001b[24m007    43.8 31\u001b[4m8\u001b[24m\u001b[4m8\u001b[24m\u001b[4m9\u001b[24m923      975.\n",
            "\u001b[90m13\u001b[39m Albania     Europe     \u001b[4m1\u001b[24m952    55.2  1\u001b[4m2\u001b[24m\u001b[4m8\u001b[24m\u001b[4m2\u001b[24m697     \u001b[4m1\u001b[24m601.\n",
            "\u001b[90m14\u001b[39m Albania     Europe     \u001b[4m1\u001b[24m957    59.3  1\u001b[4m4\u001b[24m\u001b[4m7\u001b[24m\u001b[4m6\u001b[24m505     \u001b[4m1\u001b[24m942.\n",
            "\u001b[90m15\u001b[39m Albania     Europe     \u001b[4m1\u001b[24m962    64.8  1\u001b[4m7\u001b[24m\u001b[4m2\u001b[24m\u001b[4m8\u001b[24m137     \u001b[4m2\u001b[24m313.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#국가 이름이 Croatia인 샘플을 조건식을 사용해 추출\n",
        "print(gapminder[gapminder$country == \"Croatia\", ])"
      ],
      "metadata": {
        "id": "0pOZxuE2-HzF",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "639e30cb-23eb-4573-9c44-2639a68e55e3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[90m# A tibble: 12 × 6\u001b[39m\n",
            "   country continent  year lifeExp     pop gdpPercap\n",
            "   \u001b[3m\u001b[90m<fct>\u001b[39m\u001b[23m   \u001b[3m\u001b[90m<fct>\u001b[39m\u001b[23m     \u001b[3m\u001b[90m<int>\u001b[39m\u001b[23m   \u001b[3m\u001b[90m<dbl>\u001b[39m\u001b[23m   \u001b[3m\u001b[90m<int>\u001b[39m\u001b[23m     \u001b[3m\u001b[90m<dbl>\u001b[39m\u001b[23m\n",
            "\u001b[90m 1\u001b[39m Croatia Europe     \u001b[4m1\u001b[24m952    61.2 3\u001b[4m8\u001b[24m\u001b[4m8\u001b[24m\u001b[4m2\u001b[24m229     \u001b[4m3\u001b[24m119.\n",
            "\u001b[90m 2\u001b[39m Croatia Europe     \u001b[4m1\u001b[24m957    64.8 3\u001b[4m9\u001b[24m\u001b[4m9\u001b[24m\u001b[4m1\u001b[24m242     \u001b[4m4\u001b[24m338.\n",
            "\u001b[90m 3\u001b[39m Croatia Europe     \u001b[4m1\u001b[24m962    67.1 4\u001b[4m0\u001b[24m\u001b[4m7\u001b[24m\u001b[4m6\u001b[24m557     \u001b[4m5\u001b[24m478.\n",
            "\u001b[90m 4\u001b[39m Croatia Europe     \u001b[4m1\u001b[24m967    68.5 4\u001b[4m1\u001b[24m\u001b[4m7\u001b[24m\u001b[4m4\u001b[24m366     \u001b[4m6\u001b[24m960.\n",
            "\u001b[90m 5\u001b[39m Croatia Europe     \u001b[4m1\u001b[24m972    69.6 4\u001b[4m2\u001b[24m\u001b[4m2\u001b[24m\u001b[4m5\u001b[24m310     \u001b[4m9\u001b[24m164.\n",
            "\u001b[90m 6\u001b[39m Croatia Europe     \u001b[4m1\u001b[24m977    70.6 4\u001b[4m3\u001b[24m\u001b[4m1\u001b[24m\u001b[4m8\u001b[24m673    \u001b[4m1\u001b[24m\u001b[4m1\u001b[24m305.\n",
            "\u001b[90m 7\u001b[39m Croatia Europe     \u001b[4m1\u001b[24m982    70.5 4\u001b[4m4\u001b[24m\u001b[4m1\u001b[24m\u001b[4m3\u001b[24m368    \u001b[4m1\u001b[24m\u001b[4m3\u001b[24m222.\n",
            "\u001b[90m 8\u001b[39m Croatia Europe     \u001b[4m1\u001b[24m987    71.5 4\u001b[4m4\u001b[24m\u001b[4m8\u001b[24m\u001b[4m4\u001b[24m310    \u001b[4m1\u001b[24m\u001b[4m3\u001b[24m823.\n",
            "\u001b[90m 9\u001b[39m Croatia Europe     \u001b[4m1\u001b[24m992    72.5 4\u001b[4m4\u001b[24m\u001b[4m9\u001b[24m\u001b[4m4\u001b[24m013     \u001b[4m8\u001b[24m448.\n",
            "\u001b[90m10\u001b[39m Croatia Europe     \u001b[4m1\u001b[24m997    73.7 4\u001b[4m4\u001b[24m\u001b[4m4\u001b[24m\u001b[4m4\u001b[24m595     \u001b[4m9\u001b[24m876.\n",
            "\u001b[90m11\u001b[39m Croatia Europe     \u001b[4m2\u001b[24m002    74.9 4\u001b[4m4\u001b[24m\u001b[4m8\u001b[24m\u001b[4m1\u001b[24m020    \u001b[4m1\u001b[24m\u001b[4m1\u001b[24m628.\n",
            "\u001b[90m12\u001b[39m Croatia Europe     \u001b[4m2\u001b[24m007    75.7 4\u001b[4m4\u001b[24m\u001b[4m9\u001b[24m\u001b[4m3\u001b[24m312    \u001b[4m1\u001b[24m\u001b[4m4\u001b[24m619.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(gapminder[gapminder$country == \"Croatia\", \"pop\"])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zM1MoLY5viYb",
        "outputId": "6aba860c-db87-4853-ac0c-173f94221665"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[90m# A tibble: 12 × 1\u001b[39m\n",
            "       pop\n",
            "     \u001b[3m\u001b[90m<int>\u001b[39m\u001b[23m\n",
            "\u001b[90m 1\u001b[39m 3\u001b[4m8\u001b[24m\u001b[4m8\u001b[24m\u001b[4m2\u001b[24m229\n",
            "\u001b[90m 2\u001b[39m 3\u001b[4m9\u001b[24m\u001b[4m9\u001b[24m\u001b[4m1\u001b[24m242\n",
            "\u001b[90m 3\u001b[39m 4\u001b[4m0\u001b[24m\u001b[4m7\u001b[24m\u001b[4m6\u001b[24m557\n",
            "\u001b[90m 4\u001b[39m 4\u001b[4m1\u001b[24m\u001b[4m7\u001b[24m\u001b[4m4\u001b[24m366\n",
            "\u001b[90m 5\u001b[39m 4\u001b[4m2\u001b[24m\u001b[4m2\u001b[24m\u001b[4m5\u001b[24m310\n",
            "\u001b[90m 6\u001b[39m 4\u001b[4m3\u001b[24m\u001b[4m1\u001b[24m\u001b[4m8\u001b[24m673\n",
            "\u001b[90m 7\u001b[39m 4\u001b[4m4\u001b[24m\u001b[4m1\u001b[24m\u001b[4m3\u001b[24m368\n",
            "\u001b[90m 8\u001b[39m 4\u001b[4m4\u001b[24m\u001b[4m8\u001b[24m\u001b[4m4\u001b[24m310\n",
            "\u001b[90m 9\u001b[39m 4\u001b[4m4\u001b[24m\u001b[4m9\u001b[24m\u001b[4m4\u001b[24m013\n",
            "\u001b[90m10\u001b[39m 4\u001b[4m4\u001b[24m\u001b[4m4\u001b[24m\u001b[4m4\u001b[24m595\n",
            "\u001b[90m11\u001b[39m 4\u001b[4m4\u001b[24m\u001b[4m8\u001b[24m\u001b[4m1\u001b[24m020\n",
            "\u001b[90m12\u001b[39m 4\u001b[4m4\u001b[24m\u001b[4m9\u001b[24m\u001b[4m3\u001b[24m312\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(gapminder[gapminder$country == \"Croatia\", c(\"lifeExp\",\"pop\")])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O5_Ek217vlif",
        "outputId": "ad4cf80c-fa21-4dd1-a5f0-1b2d9c7c26ee"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[90m# A tibble: 12 × 2\u001b[39m\n",
            "   lifeExp     pop\n",
            "     \u001b[3m\u001b[90m<dbl>\u001b[39m\u001b[23m   \u001b[3m\u001b[90m<int>\u001b[39m\u001b[23m\n",
            "\u001b[90m 1\u001b[39m    61.2 3\u001b[4m8\u001b[24m\u001b[4m8\u001b[24m\u001b[4m2\u001b[24m229\n",
            "\u001b[90m 2\u001b[39m    64.8 3\u001b[4m9\u001b[24m\u001b[4m9\u001b[24m\u001b[4m1\u001b[24m242\n",
            "\u001b[90m 3\u001b[39m    67.1 4\u001b[4m0\u001b[24m\u001b[4m7\u001b[24m\u001b[4m6\u001b[24m557\n",
            "\u001b[90m 4\u001b[39m    68.5 4\u001b[4m1\u001b[24m\u001b[4m7\u001b[24m\u001b[4m4\u001b[24m366\n",
            "\u001b[90m 5\u001b[39m    69.6 4\u001b[4m2\u001b[24m\u001b[4m2\u001b[24m\u001b[4m5\u001b[24m310\n",
            "\u001b[90m 6\u001b[39m    70.6 4\u001b[4m3\u001b[24m\u001b[4m1\u001b[24m\u001b[4m8\u001b[24m673\n",
            "\u001b[90m 7\u001b[39m    70.5 4\u001b[4m4\u001b[24m\u001b[4m1\u001b[24m\u001b[4m3\u001b[24m368\n",
            "\u001b[90m 8\u001b[39m    71.5 4\u001b[4m4\u001b[24m\u001b[4m8\u001b[24m\u001b[4m4\u001b[24m310\n",
            "\u001b[90m 9\u001b[39m    72.5 4\u001b[4m4\u001b[24m\u001b[4m9\u001b[24m\u001b[4m4\u001b[24m013\n",
            "\u001b[90m10\u001b[39m    73.7 4\u001b[4m4\u001b[24m\u001b[4m4\u001b[24m\u001b[4m4\u001b[24m595\n",
            "\u001b[90m11\u001b[39m    74.9 4\u001b[4m4\u001b[24m\u001b[4m8\u001b[24m\u001b[4m1\u001b[24m020\n",
            "\u001b[90m12\u001b[39m    75.7 4\u001b[4m4\u001b[24m\u001b[4m9\u001b[24m\u001b[4m3\u001b[24m312\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(gapminder[gapminder$country == \"Croatia\" & gapminder$year > 1990, c(\"lifeExp\",\"pop\")])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Vr0PGifdvnw2",
        "outputId": "fec1487f-3252-4694-d0d1-7b387a4c2ffc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[90m# A tibble: 4 × 2\u001b[39m\n",
            "  lifeExp     pop\n",
            "    \u001b[3m\u001b[90m<dbl>\u001b[39m\u001b[23m   \u001b[3m\u001b[90m<int>\u001b[39m\u001b[23m\n",
            "\u001b[90m1\u001b[39m    72.5 4\u001b[4m4\u001b[24m\u001b[4m9\u001b[24m\u001b[4m4\u001b[24m013\n",
            "\u001b[90m2\u001b[39m    73.7 4\u001b[4m4\u001b[24m\u001b[4m4\u001b[24m\u001b[4m4\u001b[24m595\n",
            "\u001b[90m3\u001b[39m    74.9 4\u001b[4m4\u001b[24m\u001b[4m8\u001b[24m\u001b[4m1\u001b[24m020\n",
            "\u001b[90m4\u001b[39m    75.7 4\u001b[4m4\u001b[24m\u001b[4m9\u001b[24m\u001b[4m3\u001b[24m312\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(apply(gapminder[gapminder$country == \"Croatia\", c(\"lifeExp\",\"pop\")], 2, mean))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1ApD4ZVDvrqB",
        "outputId": "69503874-ca8b-4114-f7b8-c92584745c96"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "     lifeExp          pop \n",
            "7.005592e+01 4.289916e+06 \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 03 dplyr 라이브러리를 이용한 데이터 가공"
      ],
      "metadata": {
        "id": "jJ5SSYOqNQ-6"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "####샘플과 속성 추출"
      ],
      "metadata": {
        "id": "-tAJ-OP1xbpn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "tb = select(gapminder, country, year, lifeExp)\n",
        "print(tb)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "shp06DqSxbL-",
        "outputId": "e8e9eeb8-aee9-49dc-9196-1850b91c5787"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[90m# A tibble: 1,704 × 3\u001b[39m\n",
            "   country      year lifeExp\n",
            "   \u001b[3m\u001b[90m<fct>\u001b[39m\u001b[23m       \u001b[3m\u001b[90m<int>\u001b[39m\u001b[23m   \u001b[3m\u001b[90m<dbl>\u001b[39m\u001b[23m\n",
            "\u001b[90m 1\u001b[39m Afghanistan  \u001b[4m1\u001b[24m952    28.8\n",
            "\u001b[90m 2\u001b[39m Afghanistan  \u001b[4m1\u001b[24m957    30.3\n",
            "\u001b[90m 3\u001b[39m Afghanistan  \u001b[4m1\u001b[24m962    32.0\n",
            "\u001b[90m 4\u001b[39m Afghanistan  \u001b[4m1\u001b[24m967    34.0\n",
            "\u001b[90m 5\u001b[39m Afghanistan  \u001b[4m1\u001b[24m972    36.1\n",
            "\u001b[90m 6\u001b[39m Afghanistan  \u001b[4m1\u001b[24m977    38.4\n",
            "\u001b[90m 7\u001b[39m Afghanistan  \u001b[4m1\u001b[24m982    39.9\n",
            "\u001b[90m 8\u001b[39m Afghanistan  \u001b[4m1\u001b[24m987    40.8\n",
            "\u001b[90m 9\u001b[39m Afghanistan  \u001b[4m1\u001b[24m992    41.7\n",
            "\u001b[90m10\u001b[39m Afghanistan  \u001b[4m1\u001b[24m997    41.8\n",
            "\u001b[90m# ℹ 1,694 more rows\u001b[39m\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "tb = filter(gapminder, country == \"Croatia\")\n",
        "print(tb)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oqt165OoxT-c",
        "outputId": "0fab54d2-fcae-4b56-a835-cc82da5710b6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[90m# A tibble: 12 × 6\u001b[39m\n",
            "   country continent  year lifeExp     pop gdpPercap\n",
            "   \u001b[3m\u001b[90m<fct>\u001b[39m\u001b[23m   \u001b[3m\u001b[90m<fct>\u001b[39m\u001b[23m     \u001b[3m\u001b[90m<int>\u001b[39m\u001b[23m   \u001b[3m\u001b[90m<dbl>\u001b[39m\u001b[23m   \u001b[3m\u001b[90m<int>\u001b[39m\u001b[23m     \u001b[3m\u001b[90m<dbl>\u001b[39m\u001b[23m\n",
            "\u001b[90m 1\u001b[39m Croatia Europe     \u001b[4m1\u001b[24m952    61.2 3\u001b[4m8\u001b[24m\u001b[4m8\u001b[24m\u001b[4m2\u001b[24m229     \u001b[4m3\u001b[24m119.\n",
            "\u001b[90m 2\u001b[39m Croatia Europe     \u001b[4m1\u001b[24m957    64.8 3\u001b[4m9\u001b[24m\u001b[4m9\u001b[24m\u001b[4m1\u001b[24m242     \u001b[4m4\u001b[24m338.\n",
            "\u001b[90m 3\u001b[39m Croatia Europe     \u001b[4m1\u001b[24m962    67.1 4\u001b[4m0\u001b[24m\u001b[4m7\u001b[24m\u001b[4m6\u001b[24m557     \u001b[4m5\u001b[24m478.\n",
            "\u001b[90m 4\u001b[39m Croatia Europe     \u001b[4m1\u001b[24m967    68.5 4\u001b[4m1\u001b[24m\u001b[4m7\u001b[24m\u001b[4m4\u001b[24m366     \u001b[4m6\u001b[24m960.\n",
            "\u001b[90m 5\u001b[39m Croatia Europe     \u001b[4m1\u001b[24m972    69.6 4\u001b[4m2\u001b[24m\u001b[4m2\u001b[24m\u001b[4m5\u001b[24m310     \u001b[4m9\u001b[24m164.\n",
            "\u001b[90m 6\u001b[39m Croatia Europe     \u001b[4m1\u001b[24m977    70.6 4\u001b[4m3\u001b[24m\u001b[4m1\u001b[24m\u001b[4m8\u001b[24m673    \u001b[4m1\u001b[24m\u001b[4m1\u001b[24m305.\n",
            "\u001b[90m 7\u001b[39m Croatia Europe     \u001b[4m1\u001b[24m982    70.5 4\u001b[4m4\u001b[24m\u001b[4m1\u001b[24m\u001b[4m3\u001b[24m368    \u001b[4m1\u001b[24m\u001b[4m3\u001b[24m222.\n",
            "\u001b[90m 8\u001b[39m Croatia Europe     \u001b[4m1\u001b[24m987    71.5 4\u001b[4m4\u001b[24m\u001b[4m8\u001b[24m\u001b[4m4\u001b[24m310    \u001b[4m1\u001b[24m\u001b[4m3\u001b[24m823.\n",
            "\u001b[90m 9\u001b[39m Croatia Europe     \u001b[4m1\u001b[24m992    72.5 4\u001b[4m4\u001b[24m\u001b[4m9\u001b[24m\u001b[4m4\u001b[24m013     \u001b[4m8\u001b[24m448.\n",
            "\u001b[90m10\u001b[39m Croatia Europe     \u001b[4m1\u001b[24m997    73.7 4\u001b[4m4\u001b[24m\u001b[4m4\u001b[24m\u001b[4m4\u001b[24m595     \u001b[4m9\u001b[24m876.\n",
            "\u001b[90m11\u001b[39m Croatia Europe     \u001b[4m2\u001b[24m002    74.9 4\u001b[4m4\u001b[24m\u001b[4m8\u001b[24m\u001b[4m1\u001b[24m020    \u001b[4m1\u001b[24m\u001b[4m1\u001b[24m628.\n",
            "\u001b[90m12\u001b[39m Croatia Europe     \u001b[4m2\u001b[24m007    75.7 4\u001b[4m4\u001b[24m\u001b[4m9\u001b[24m\u001b[4m3\u001b[24m312    \u001b[4m1\u001b[24m\u001b[4m4\u001b[24m619.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### 행/열 단위의 연산"
      ],
      "metadata": {
        "id": "vi_P0PJwxxEl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "tb = summarise(gapminder, pop_avg = mean(pop))\n",
        "print(tb)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qQon2MO-xk-N",
        "outputId": "a6d94c40-7867-4eba-dbb8-3bfa35aedb1e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[90m# A tibble: 1 × 1\u001b[39m\n",
            "    pop_avg\n",
            "      \u001b[3m\u001b[90m<dbl>\u001b[39m\u001b[23m\n",
            "\u001b[90m1\u001b[39m 29\u001b[4m6\u001b[24m\u001b[4m0\u001b[24m\u001b[4m1\u001b[24m212.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "tb = summarise(group_by(gapminder, continent), pop_avg = mean(pop))\n",
        "print(tb)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xwPAmtUHxpe4",
        "outputId": "da25ac7b-a39a-44b0-95f8-60321d236e8a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[90m# A tibble: 5 × 2\u001b[39m\n",
            "  continent   pop_avg\n",
            "  \u001b[3m\u001b[90m<fct>\u001b[39m\u001b[23m         \u001b[3m\u001b[90m<dbl>\u001b[39m\u001b[23m\n",
            "\u001b[90m1\u001b[39m Africa     9\u001b[4m9\u001b[24m\u001b[4m1\u001b[24m\u001b[4m6\u001b[24m003.\n",
            "\u001b[90m2\u001b[39m Americas  24\u001b[4m5\u001b[24m\u001b[4m0\u001b[24m\u001b[4m4\u001b[24m795.\n",
            "\u001b[90m3\u001b[39m Asia      77\u001b[4m0\u001b[24m\u001b[4m3\u001b[24m\u001b[4m8\u001b[24m722.\n",
            "\u001b[90m4\u001b[39m Europe    17\u001b[4m1\u001b[24m\u001b[4m6\u001b[24m\u001b[4m9\u001b[24m765.\n",
            "\u001b[90m5\u001b[39m Oceania    8\u001b[4m8\u001b[24m\u001b[4m7\u001b[24m\u001b[4m4\u001b[24m672.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "tb = summarise(group_by(gapminder, continent, country), pop_avg = mean(pop))\n",
        "print(tb)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rFLWeXpTxpnd",
        "outputId": "af8223ac-00b1-455e-82a4-2ac049860675"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\u001b[1m\u001b[22m`summarise()` has grouped output by 'continent'. You can override using the\n",
            "`.groups` argument.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[90m# A tibble: 142 × 3\u001b[39m\n",
            "\u001b[90m# Groups:   continent [5]\u001b[39m\n",
            "   continent country                    pop_avg\n",
            "   \u001b[3m\u001b[90m<fct>\u001b[39m\u001b[23m     \u001b[3m\u001b[90m<fct>\u001b[39m\u001b[23m                        \u001b[3m\u001b[90m<dbl>\u001b[39m\u001b[23m\n",
            "\u001b[90m 1\u001b[39m Africa    Algeria                  19\u001b[4m8\u001b[24m\u001b[4m7\u001b[24m\u001b[4m5\u001b[24m406.\n",
            "\u001b[90m 2\u001b[39m Africa    Angola                    7\u001b[4m3\u001b[24m\u001b[4m0\u001b[24m\u001b[4m9\u001b[24m390.\n",
            "\u001b[90m 3\u001b[39m Africa    Benin                     4\u001b[4m0\u001b[24m\u001b[4m1\u001b[24m\u001b[4m7\u001b[24m497.\n",
            "\u001b[90m 4\u001b[39m Africa    Botswana                   \u001b[4m9\u001b[24m\u001b[4m7\u001b[24m\u001b[4m1\u001b[24m186.\n",
            "\u001b[90m 5\u001b[39m Africa    Burkina Faso              7\u001b[4m5\u001b[24m\u001b[4m4\u001b[24m\u001b[4m8\u001b[24m677.\n",
            "\u001b[90m 6\u001b[39m Africa    Burundi                   4\u001b[4m6\u001b[24m\u001b[4m5\u001b[24m\u001b[4m1\u001b[24m608.\n",
            "\u001b[90m 7\u001b[39m Africa    Cameroon                  9\u001b[4m8\u001b[24m\u001b[4m1\u001b[24m\u001b[4m6\u001b[24m648.\n",
            "\u001b[90m 8\u001b[39m Africa    Central African Republic  2\u001b[4m5\u001b[24m\u001b[4m6\u001b[24m\u001b[4m0\u001b[24m963 \n",
            "\u001b[90m 9\u001b[39m Africa    Chad                      5\u001b[4m3\u001b[24m\u001b[4m2\u001b[24m\u001b[4m9\u001b[24m256.\n",
            "\u001b[90m10\u001b[39m Africa    Comoros                    \u001b[4m3\u001b[24m\u001b[4m6\u001b[24m\u001b[4m1\u001b[24m684.\n",
            "\u001b[90m# ℹ 132 more rows\u001b[39m\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "####%>% 연산자를 이용한 연속 처리"
      ],
      "metadata": {
        "id": "HYyGwQe4yDcL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "tb = gapminder %>% group_by(continent, country) %>% summarise(pop_avg = mean(pop))\n",
        "print(tb)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "upDGfJShxsJ3",
        "outputId": "370ab36f-40a6-4c4f-95be-238788b9fc0f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\u001b[1m\u001b[22m`summarise()` has grouped output by 'continent'. You can override using the\n",
            "`.groups` argument.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[90m# A tibble: 142 × 3\u001b[39m\n",
            "\u001b[90m# Groups:   continent [5]\u001b[39m\n",
            "   continent country                    pop_avg\n",
            "   \u001b[3m\u001b[90m<fct>\u001b[39m\u001b[23m     \u001b[3m\u001b[90m<fct>\u001b[39m\u001b[23m                        \u001b[3m\u001b[90m<dbl>\u001b[39m\u001b[23m\n",
            "\u001b[90m 1\u001b[39m Africa    Algeria                  19\u001b[4m8\u001b[24m\u001b[4m7\u001b[24m\u001b[4m5\u001b[24m406.\n",
            "\u001b[90m 2\u001b[39m Africa    Angola                    7\u001b[4m3\u001b[24m\u001b[4m0\u001b[24m\u001b[4m9\u001b[24m390.\n",
            "\u001b[90m 3\u001b[39m Africa    Benin                     4\u001b[4m0\u001b[24m\u001b[4m1\u001b[24m\u001b[4m7\u001b[24m497.\n",
            "\u001b[90m 4\u001b[39m Africa    Botswana                   \u001b[4m9\u001b[24m\u001b[4m7\u001b[24m\u001b[4m1\u001b[24m186.\n",
            "\u001b[90m 5\u001b[39m Africa    Burkina Faso              7\u001b[4m5\u001b[24m\u001b[4m4\u001b[24m\u001b[4m8\u001b[24m677.\n",
            "\u001b[90m 6\u001b[39m Africa    Burundi                   4\u001b[4m6\u001b[24m\u001b[4m5\u001b[24m\u001b[4m1\u001b[24m608.\n",
            "\u001b[90m 7\u001b[39m Africa    Cameroon                  9\u001b[4m8\u001b[24m\u001b[4m1\u001b[24m\u001b[4m6\u001b[24m648.\n",
            "\u001b[90m 8\u001b[39m Africa    Central African Republic  2\u001b[4m5\u001b[24m\u001b[4m6\u001b[24m\u001b[4m0\u001b[24m963 \n",
            "\u001b[90m 9\u001b[39m Africa    Chad                      5\u001b[4m3\u001b[24m\u001b[4m2\u001b[24m\u001b[4m9\u001b[24m256.\n",
            "\u001b[90m10\u001b[39m Africa    Comoros                    \u001b[4m3\u001b[24m\u001b[4m6\u001b[24m\u001b[4m1\u001b[24m684.\n",
            "\u001b[90m# ℹ 132 more rows\u001b[39m\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "temp1 = filter(gapminder, country == \"Croatia\")\n",
        "temp2 = select(temp1, country, year, lifeExp)\n",
        "temp3 = apply(temp2[ , c(\"lifeExp\")], 2, mean)\n",
        "print(temp3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WMiJ5UteyOu9",
        "outputId": "3623a5d4-38e3-41aa-f47d-e8487cc3e9f3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " lifeExp \n",
            "70.05592 \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "tb = gapminder %>% filter(country == \"Croatia\") %>% select(country, year, lifeExp) %>% summarise(lifeExp_avg = mean(lifeExp))\n",
        "print(tb)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MVW-a-8TyQhx",
        "outputId": "023b5e2a-e798-41a6-fc02-09f3c37965e8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[90m# A tibble: 1 × 1\u001b[39m\n",
            "  lifeExp_avg\n",
            "        \u001b[3m\u001b[90m<dbl>\u001b[39m\u001b[23m\n",
            "\u001b[90m1\u001b[39m        70.1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##04 데이터 가공의 실제"
      ],
      "metadata": {
        "id": "_W8UPeijyNj7"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 방대한 데이터 요약"
      ],
      "metadata": {
        "id": "NFT__8Ku6YvU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 새로운 셀에 추가할 코드:\n",
        "# 1. 파일 다운로드를 위해 필요한 'httr' 패키지를 설치하고 로드합니다.\n",
        "#    이미 설치했다면 생략해도 됩니다.\n",
        "if (!requireNamespace(\"httr\", quietly = TRUE)) {\n",
        "  install.packages(\"httr\")\n",
        "}\n",
        "library(httr)\n",
        "\n",
        "# 2. 공개된 아보카도 데이터셋 URL을 지정합니다.\n",
        "avocado_url <- 'https://synapseaisolutionsa.z13.web.core.windows.net/data/AvocadoPrice/avocado.csv'\n",
        "\n",
        "# 3. URL에서 파일을 다운로드하여 원본 코드에서 참조하는 'avocado.csv'라는 이름으로 저장합니다.\n",
        "GET(avocado_url, write_disk(\"avocado.csv\", overwrite = TRUE))\n",
        "\n",
        "# 이제 원본 코드의 read.csv(\"avocado.csv\", ...) 부분이 성공적으로 실행됩니다."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 128
        },
        "id": "87ZipTCSw5J5",
        "outputId": "0bd87736-c1a9-44dd-9a2d-220a775ff72f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Response [https://synapseaisolutionsa.z13.web.core.windows.net/data/AvocadoPrice/avocado.csv]\n",
              "  Date: 2025-10-02 02:32\n",
              "  Status: 200\n",
              "  Content-Type: text/csv\n",
              "  Size: 1.99 MB\n",
              "<ON DISK>  /content/avocado.csvNULL"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 원본 코드 중 read.csv(\"avocado.csv\", ...) 셀 바로 위에 추가할 코드:\n",
        "\n",
        "# 원본 코드가 실행된 후, 변수 'avocado'가 데이터프레임으로 로드되었다고 가정\n",
        "# 하지만 원본 코드 바로 뒤에 이 코드를 넣으면 오류가 납니다.\n",
        "# 따라서, 원본 코드의 `read.csv`가 성공한 후, `group_by(region, year, month(Date), ...)` 코드가 실행되기 전에\n",
        "# 아래 코드를 실행해야 합니다.\n",
        "\n",
        "# 원본 코드의 `avocado <- read.csv(\"avocado.csv\", ...)` 셀을 그대로 두고 실행합니다.\n",
        "# 그리고 그 다음 셀에서 `lubridate` 에러가 발생하는 코드 셀 바로 위에 다음 코드를 추가합니다.\n",
        "\n",
        "# 1. 'avocado' 데이터프레임의 'Date' 컬럼을 날짜 형식으로 변환합니다.\n",
        "#    (read.csv로 로드된 직후의 셀에서 실행)\n",
        "avocado <- read.csv(\"avocado.csv\", header=TRUE, sep = \",\") # 파일 로드 (이전 셀에서 오류가 발생했다면 이 셀을 대체합니다.)\n",
        "avocado$Date <- as.Date(avocado$Date, format = \"%Y-%m-%d\")\n",
        "\n",
        "# 2. lubridate 라이브러리가 로드되었는지 확인합니다.\n",
        "if (!requireNamespace(\"lubridate\", quietly = TRUE)) {\n",
        "  install.packages(\"lubridate\")\n",
        "}\n",
        "library(lubridate)"
      ],
      "metadata": {
        "id": "gm4lqmIjw9P2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "####데이터 셋을 읽어들여 프레임 구성 확인"
      ],
      "metadata": {
        "id": "P4dIA7VJzVuy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "avocado <- read.csv(\"avocado.csv\", header=TRUE, sep = \",\")\n",
        "str(avocado)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RJ0bsleVyT1Q",
        "outputId": "8963da64-19d4-486f-e646-54e2c6cce1a4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "'data.frame':\t18249 obs. of  14 variables:\n",
            " $ X           : int  0 1 2 3 4 5 6 7 8 9 ...\n",
            " $ Date        : chr  \"2015-12-27\" \"2015-12-20\" \"2015-12-13\" \"2015-12-06\" ...\n",
            " $ AveragePrice: num  1.33 1.35 0.93 1.08 1.28 1.26 0.99 0.98 1.02 1.07 ...\n",
            " $ Total.Volume: num  64237 54877 118220 78992 51040 ...\n",
            " $ X4046       : num  1037 674 795 1132 941 ...\n",
            " $ X4225       : num  54455 44639 109150 71976 43838 ...\n",
            " $ X4770       : num  48.2 58.3 130.5 72.6 75.8 ...\n",
            " $ Total.Bags  : num  8697 9506 8145 5811 6184 ...\n",
            " $ Small.Bags  : num  8604 9408 8042 5677 5986 ...\n",
            " $ Large.Bags  : num  93.2 97.5 103.1 133.8 197.7 ...\n",
            " $ XLarge.Bags : num  0 0 0 0 0 0 0 0 0 0 ...\n",
            " $ type        : chr  \"conventional\" \"conventional\" \"conventional\" \"conventional\" ...\n",
            " $ year        : int  2015 2015 2015 2015 2015 2015 2015 2015 2015 2015 ...\n",
            " $ region      : chr  \"Albany\" \"Albany\" \"Albany\" \"Albany\" ...\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "####그룹 단위 통계"
      ],
      "metadata": {
        "id": "HtqbhovAzaew"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x_avg = avocado %>% group_by(region) %>% summarize(V_avg = mean(Total.Volume), P_avg = mean(AveragePrice))\n",
        "print(x_avg)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7bzNZdlmzbwl",
        "outputId": "0d720b4a-e76f-4365-df1f-f26bd8456983"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[90m# A tibble: 54 × 3\u001b[39m\n",
            "   region                 V_avg P_avg\n",
            "   \u001b[3m\u001b[90m<chr>\u001b[39m\u001b[23m                  \u001b[3m\u001b[90m<dbl>\u001b[39m\u001b[23m \u001b[3m\u001b[90m<dbl>\u001b[39m\u001b[23m\n",
            "\u001b[90m 1\u001b[39m Albany                \u001b[4m4\u001b[24m\u001b[4m7\u001b[24m538.  1.56\n",
            "\u001b[90m 2\u001b[39m Atlanta              \u001b[4m2\u001b[24m\u001b[4m6\u001b[24m\u001b[4m2\u001b[24m145.  1.34\n",
            "\u001b[90m 3\u001b[39m BaltimoreWashington  \u001b[4m3\u001b[24m\u001b[4m9\u001b[24m\u001b[4m8\u001b[24m562.  1.53\n",
            "\u001b[90m 4\u001b[39m Boise                 \u001b[4m4\u001b[24m\u001b[4m2\u001b[24m643.  1.35\n",
            "\u001b[90m 5\u001b[39m Boston               \u001b[4m2\u001b[24m\u001b[4m8\u001b[24m\u001b[4m7\u001b[24m793.  1.53\n",
            "\u001b[90m 6\u001b[39m BuffaloRochester      \u001b[4m6\u001b[24m\u001b[4m7\u001b[24m936.  1.52\n",
            "\u001b[90m 7\u001b[39m California          3\u001b[4m0\u001b[24m\u001b[4m4\u001b[24m\u001b[4m4\u001b[24m324.  1.40\n",
            "\u001b[90m 8\u001b[39m Charlotte            \u001b[4m1\u001b[24m\u001b[4m0\u001b[24m\u001b[4m5\u001b[24m194.  1.61\n",
            "\u001b[90m 9\u001b[39m Chicago              \u001b[4m3\u001b[24m\u001b[4m9\u001b[24m\u001b[4m5\u001b[24m569.  1.56\n",
            "\u001b[90m10\u001b[39m CincinnatiDayton     \u001b[4m1\u001b[24m\u001b[4m3\u001b[24m\u001b[4m1\u001b[24m722.  1.21\n",
            "\u001b[90m# ℹ 44 more rows\u001b[39m\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_avg = avocado %>% group_by(region, year) %>% summarize(V_avg = mean(Total.Volume), P_avg = mean(AveragePrice))\n",
        "print(x_avg)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LuAd5VLezfRU",
        "outputId": "49b60ec2-598e-4735-dfea-e27202de5116"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\u001b[1m\u001b[22m`summarise()` has grouped output by 'region'. You can override using the\n",
            "`.groups` argument.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[90m# A tibble: 216 × 4\u001b[39m\n",
            "\u001b[90m# Groups:   region [54]\u001b[39m\n",
            "   region               year   V_avg P_avg\n",
            "   \u001b[3m\u001b[90m<chr>\u001b[39m\u001b[23m               \u001b[3m\u001b[90m<int>\u001b[39m\u001b[23m   \u001b[3m\u001b[90m<dbl>\u001b[39m\u001b[23m \u001b[3m\u001b[90m<dbl>\u001b[39m\u001b[23m\n",
            "\u001b[90m 1\u001b[39m Albany               \u001b[4m2\u001b[24m015  \u001b[4m3\u001b[24m\u001b[4m8\u001b[24m749.  1.54\n",
            "\u001b[90m 2\u001b[39m Albany               \u001b[4m2\u001b[24m016  \u001b[4m5\u001b[24m\u001b[4m0\u001b[24m619.  1.53\n",
            "\u001b[90m 3\u001b[39m Albany               \u001b[4m2\u001b[24m017  \u001b[4m4\u001b[24m\u001b[4m9\u001b[24m355.  1.64\n",
            "\u001b[90m 4\u001b[39m Albany               \u001b[4m2\u001b[24m018  \u001b[4m6\u001b[24m\u001b[4m4\u001b[24m249.  1.44\n",
            "\u001b[90m 5\u001b[39m Atlanta              \u001b[4m2\u001b[24m015 \u001b[4m2\u001b[24m\u001b[4m2\u001b[24m\u001b[4m3\u001b[24m382.  1.38\n",
            "\u001b[90m 6\u001b[39m Atlanta              \u001b[4m2\u001b[24m016 \u001b[4m2\u001b[24m\u001b[4m7\u001b[24m\u001b[4m2\u001b[24m374.  1.21\n",
            "\u001b[90m 7\u001b[39m Atlanta              \u001b[4m2\u001b[24m017 \u001b[4m2\u001b[24m\u001b[4m7\u001b[24m\u001b[4m1\u001b[24m841.  1.43\n",
            "\u001b[90m 8\u001b[39m Atlanta              \u001b[4m2\u001b[24m018 \u001b[4m3\u001b[24m\u001b[4m4\u001b[24m\u001b[4m2\u001b[24m976.  1.29\n",
            "\u001b[90m 9\u001b[39m BaltimoreWashington  \u001b[4m2\u001b[24m015 \u001b[4m3\u001b[24m\u001b[4m9\u001b[24m\u001b[4m0\u001b[24m823.  1.37\n",
            "\u001b[90m10\u001b[39m BaltimoreWashington  \u001b[4m2\u001b[24m016 \u001b[4m3\u001b[24m\u001b[4m9\u001b[24m\u001b[4m3\u001b[24m210.  1.59\n",
            "\u001b[90m# ℹ 206 more rows\u001b[39m\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_avg = avocado %>% group_by(region, year, type) %>% summarize(V_avg = mean(Total.Volume), P_avg = mean(AveragePrice))\n",
        "print(x_avg)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "okqcPmXgzlKq",
        "outputId": "ee1aa4f0-4150-4e41-bc51-2be95e6ab8be"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\u001b[1m\u001b[22m`summarise()` has grouped output by 'region', 'year'. You can override using\n",
            "the `.groups` argument.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[90m# A tibble: 432 × 5\u001b[39m\n",
            "\u001b[90m# Groups:   region, year [216]\u001b[39m\n",
            "   region   year type           V_avg P_avg\n",
            "   \u001b[3m\u001b[90m<chr>\u001b[39m\u001b[23m   \u001b[3m\u001b[90m<int>\u001b[39m\u001b[23m \u001b[3m\u001b[90m<chr>\u001b[39m\u001b[23m          \u001b[3m\u001b[90m<dbl>\u001b[39m\u001b[23m \u001b[3m\u001b[90m<dbl>\u001b[39m\u001b[23m\n",
            "\u001b[90m 1\u001b[39m Albany   \u001b[4m2\u001b[24m015 conventional  \u001b[4m7\u001b[24m\u001b[4m6\u001b[24m209.  1.17\n",
            "\u001b[90m 2\u001b[39m Albany   \u001b[4m2\u001b[24m015 organic        \u001b[4m1\u001b[24m289.  1.91\n",
            "\u001b[90m 3\u001b[39m Albany   \u001b[4m2\u001b[24m016 conventional  \u001b[4m9\u001b[24m\u001b[4m9\u001b[24m453.  1.35\n",
            "\u001b[90m 4\u001b[39m Albany   \u001b[4m2\u001b[24m016 organic        \u001b[4m1\u001b[24m784.  1.72\n",
            "\u001b[90m 5\u001b[39m Albany   \u001b[4m2\u001b[24m017 conventional  \u001b[4m9\u001b[24m\u001b[4m5\u001b[24m779.  1.53\n",
            "\u001b[90m 6\u001b[39m Albany   \u001b[4m2\u001b[24m017 organic        \u001b[4m2\u001b[24m931.  1.75\n",
            "\u001b[90m 7\u001b[39m Albany   \u001b[4m2\u001b[24m018 conventional \u001b[4m1\u001b[24m\u001b[4m2\u001b[24m\u001b[4m4\u001b[24m161.  1.34\n",
            "\u001b[90m 8\u001b[39m Albany   \u001b[4m2\u001b[24m018 organic        \u001b[4m4\u001b[24m338.  1.53\n",
            "\u001b[90m 9\u001b[39m Atlanta  \u001b[4m2\u001b[24m015 conventional \u001b[4m4\u001b[24m\u001b[4m4\u001b[24m\u001b[4m0\u001b[24m346.  1.05\n",
            "\u001b[90m10\u001b[39m Atlanta  \u001b[4m2\u001b[24m015 organic        \u001b[4m6\u001b[24m417.  1.71\n",
            "\u001b[90m# ℹ 422 more rows\u001b[39m\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "library(ggplot2)"
      ],
      "metadata": {
        "id": "SAxkv6543szH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_avg %>% filter(region != \"TotalUS\") %>% ggplot(aes(year, V_avg, col = type)) + geom_line() + facet_wrap(~region)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 437
        },
        "id": "ZUTXbBt8zxKC",
        "outputId": "cced2387-894d-4927-f98f-411e747b45cb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "plot without title"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA0gAAANICAIAAAByhViMAAAACXBIWXMAABJ0AAASdAHeZh94\nAAAgAElEQVR4nOydeXhU1fn4z93v7JkJSyABZEkCYW1FMRWtCIgb2upXRWkTUYSggiIqUrDg\ngliXgiiU1VqLCGjdKIoL2ta2GhYFUSBAfqksWcg6k8lsd+69vz+OXMfMPWcmkxAgvJ/ngSdz\n33vO+77nnvPOO3d5L6PrOgIAAAAAAADOftjTbQAAAAAAAADQNkBiBwAAAAAA0EGAxA4AAAAA\nAKCDAIkdAAAAAABABwESOwAAAAAAgA4CJHYAAAAAAAAdBEjsAAAAAAAAOgiQ2AEAAAAAAHQQ\n+NNtwOmhsrIyGAyebitSpHfv3iRRfX19Q0NDexrThrhcLo/HQ5KWlZW1pzFtiCzL3bp1I0nP\nXr9Ylu3VqxdJeuTIEVVV29OeNoSyxKqqqgKBQHsa04Z01NDhdDrT09NJ0rN3iUmS1L1799Nt\nBXD2cY4mdtFoVFGU021F26Oq6tnrFz0POHv9EgSBIj17/WJZ2vl+RVHO3sSOQkcNHZqmnb1+\nddTQwXHc6TYBOCuBS7EAAAAAAAAdBEjsAAAAAAAAOgiQ2AEAAAAAAHQQILEDAAAAAADoIEBi\nBwAAAAAA0EGAxA4AAAAAAKCDAIldi1FVddSoUdu3bzf+ON0WtT0d2LVTxJgxY/79738323ja\nhxEbsGvXrtNlQMfj17/+9RVXXEEq+db+R9x04rU/zaIinnIHDhyYOHEiZbha1Hk7TOPWDOZp\nX+wAYHCO1rFLkvr6+ptvvtntdr/++usdqaQQya+vv/7aarXm5ua2pvM26eTUUVRU1Lt379mz\nZxtbJk6c2K1bt+eee87YMn369IyMjLlz57ZSF8uyS5YsGTBgQCv7wUydOvXgwYP4b5vN1qNH\njxtvvHHMmDEJDejbt2+bGNCGpOALiXaeb126dFmxYoXVak25h1jfEUIulysnJ2fSpEltNU9a\nT3V19bp164qLi2tra51OZ//+/W+55ZYhQ4Yk0zZ2yr311ludO3deuXJla4YLtek0bo1rrSd2\nrp7hcRI4q4EzdjS2bNkyZMiQaDT65Zdfnm5b2hKSX5s2bSopKWll523SyakjPz9/+/btuq7j\nj+Xl5XV1dXv37g2FQnhLU1PT/v37L7rootbrYhhm6NChDoej9V1hrrzyyk2bNm3atOnFF18c\nNmzYwoUL6UONDbDb7W1lQBvSUl9ItPN8O++88+x2O704c0IM3zdt2vT000/bbLZZs2ZVVFS0\nlZGt4ciRI3fdddfevXvvvvvu1atXP/roozab7YEHHvjnP/+ZTPPYKef3+3v27Nn64WqradxK\n11pP7Fw9w+MkcFYDZ+yIaJr297//vbCwsLS0dPPmzRdffLHpblVVVTNmzCgpKcnIyJgyZQre\nraysbPny5QcOHNB1PS8v77777svMzNQ0bfTo0fPmzfvwww9PnDgRCoUmTZo0bty4e++9t2/f\nvjNnzsQd7tu37957712/fn1GRkZ7+jVz5sw9e/bs2rVry5Yty5cvN/ZvkS+xnaxcudK0bQo2\njx07trKy8qabbpowYQJCqK6ubtmyZbt3725qaurXr19RUdGgQYNUVR0zZsyDDz64bt26YcOG\nzZ49u66u7qWXXtqzZ08gEMjNzb377rtzcnLy8/NfeeWVw4cPZ2dnI4SKi4sHDx5cUVGxe/du\nnMzhKz4jRowgGb9169bXX3+9srLSbrePHDnynnvuEUURIeTz+R5++OHdu3c7HI6pU6deccUV\n2KQXX3wxKyurtYcNIYSQLMudO3dGCHXu3Hny5MmbNm36/vvv8Y9+ypg899xz559/vqnZpkPU\nJqa2uS/IbORnz54dO99MG5Lmampmb968+YMPPli/fn1DQwN9bpO8iPUduz9v3rzx48cXFxf/\n6le/ojSsrq5eunTpzp07rVbryJEjp02bJssyMpt4uJPUjuzixYvT0tJWrFiBZzVCaNiwYV26\ndCkrK/vlL3+JCAHBaG5MuVdfffW7775DCH388cfr16/XdT3hmn3ooYdMj1TsNG5NSEnoGmkw\nTZU2M/7BBx+kH/rY2Gi1WpvN29O1DIEOCZyxI1JcXOz1ei+77LIrr7xyx44dlZWVprtt2rRp\nypQpb7311qhRo+bPn19VVYUQmj9/vsfjeeONNzZu3Gi1WhctWoQQYlmW47hNmzbNmTPnlVde\nKSgoWLJkSSgUuuaaaz799NNIJII7/Oyzz4YOHXqKsjqKX4sXL+7Spcu99967cuXK2P1b5Euz\nTkzbpsDHH388e/bsNWvW1NfXI4TmzZvX2Ni4Zs2ad955Jy8v75FHHvF6vRzHcRy3efPmxx57\nbPr06Xg3hNCf//znd955Z/DgwY888kg4HM7Ozk5PTy8uLsY9b9++fejQocOGDTNujtm+ffug\n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\nZ0ppaanp61DPCihL7Pjx46YvFT0roPhVW1tbW2v+1uwzn7S0tNg3Tzbj7F1isiz37NnzdFsB\nnH3AGTsAAAAAAIAOAiR2AAAAAAAAHQRI7AAAAAAAADoIkNgBAAAAAAB0ECCxAwAAAAAA6CBA\nYgcAAAAAANBBgMQOAAAAAACggwCJXbKMGTPm3//+d7ONqqqOGjVq165dp8WkJDmlRp7hI4DN\n2759+2nvpEWK2k0jcPZyhi+9ysrKUaNGlZWVtXnPZ7jjFGBdA+3DOVqg2JTq6up169YVFxfX\n1tY6nc7+/fvfcsstQ4YMoTRhWXbJkiV9+/ZtNyNT4FQY+fXXX1ut1tzc3NjOp06dimuBMgxj\nt9uzs7PHjRs3duxYhmHaRGkKB+hcwzgEscyePfvKK680DllRUVHv3r1nz55t7DBx4sRu3bo9\n99xzxpbp06dnZGTMnTv3lBp5iubJ6SVl74wDlKSi2KXX0rbtTLNp6XK5cnJyJk2aNGDAgBR6\na1FAO++886xWa8+ePa+99torrrgiBXXxxI721KlT8/Ly7rvvvjbpGQDaBEjsfuDIkSMzZszw\neDx33313z549Gxoa3n///QceeODRRx/95S9/SWrFMMzQoUPb084UOBVGbtq0KT8/Pzc3t1nn\nV1555R133KGqalVV1d69e5cuXfqf//xn/vz5LNvac8OpHaBzkLFjxxYWFsZucbvdKOaQ5efn\nv/fee7qu41SjvLy8rq6upqYmFArJsowQampq2r9//69+9atTZ+SpmydnAql5ZxygJLXELr2W\ntm1/8Jjgv2trazdu3Dhr1qy1a9d269atpV21KKB99NFH+/bt+/LLL5999tmjR4/eeeedLVUX\nz5k/2sA5DiR2P7B48eK0tLQVK1aIooi3DBs2rEuXLmVlZUbe4PP5Hn744d27dzscjqlTp15x\nxRWqqo4ZM+a55547//zzq6urly5dunPnTqvVOnLkyGnTpsmyXFZWtnz58gMHDui6jn/YZWZm\nIoRKS0ufeuqpY8eOnXfeedOmTZs5c+batWv79OlTV1e3bNmy3bt3NzU19evXr6ioaNCgQS1y\nJN4MQRCwkT/72c9Gjx49b968Dz/88MSJE6FQaNKkSePGjdM0zXQ7QsjU/pkzZ+7Zs2fXrl1b\ntmxZvny5MQIIIVmW8WvBMjIyhg4deuGFF959993btm0bO3Ysqbd77723b9++M2fObOUBog9d\nMBi8+uqrlyxZgr8Sjh8//pvf/GbdunXdunUbPXr0nDlzPvjgg4qKCovFMnfu3I8//njXrl31\n9fU33XTThAkTcA9VVVUzZswoKSnJyMiYMmXKxRdfTOozMzNz69atr7/+emVlpd1uv+yyy158\n8UVTp/Ly8qLRaOzEiIc0hWJVjBw58p577sEjY7PZ4ruKPWSzZs165ZVXDh8+nJ2djRAqLi4e\nPHhwRUXF7t27L7roIoQQvsg1YsQI0qjiaf/QQw/df//99KNGgj5P6urqXnrppT179gQCgdzc\n3LvvvjsnJ4c0S7HUsGTPnj0PPPDAxo0bWZaN7wRb/uCDD65bt27YsGGxpy3bkBS8i19TsUZS\njsJzzz23bt06o+3KlStTs1nTtPjBMZ17lHBx+PDh559//n//+1+3bt0mTpxoOiYIoc6dO8+b\nN2/8+PHFxcX494OpokgkMm7cuFmzZn3yySeVlZUIoenTp1988cWxUdfQWFpaauoXfotaXl5e\nTk5OaWmppmm6rscPb/wRIVkVe6Qoo01atgaqqs6ePZvn+YULF3q9XlMDtmzZMm3atNQOKHAu\n0xF+H7eehoaG3bt3T5gwwUgaMJMnT7799tuNj3/7298KCgreeeedq6++evHixcFgMHbn3//+\n9xzHvfbaa0uXLt27dy9e8/Pnz/d4PG+88cbGjRutVuuiRYsQQpqm/e53v+vTp89bb701e/bs\nP/3pTwghfPpk3rx5jY2Na9aseeedd/Ly8h555BGv19siX0zNwLAsy3Hcpk2b5syZ88orrxQU\nFCxZsiQUCpG2k+xfvHhxly5d7r333oTfIjk5OSNGjNi2bRv+aNrbNddc8+mnn0YiEUo/tbW1\nCQ9QakOHff/73//+1FNPvfbaay6Xa+bMmYMGDVqzZs3s2bPXrFlTX1+P99y0adOUKVPeeuut\nUaNGzZ8/v6qqitRneXn5M888c999973//vsvvvjit99+S9pz586dsUNhiumgNVOxb9++N954\ng+Jm7CHLzs5OT08vLi7Gou3btw8dOnTYsGHGrT/bt28fNGiQ3W5HhFHlOI7juM2bN1M0tohm\n82TevHkIoT//+c/vvPPO4MGDH3nkkXA4TJqlo0eP/vzzzzVNw20//fTTYcOGderUybQTw/LH\nHnts+vTpbWV/672LPUDxRtLndvLrkQIe3mZ6Tece6UBomvboo4/27Nnz7bffXrRoEX16MAzD\n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\nvXr1ol2r0HqkJdGPXfaWW26599576+rqVq1axTDAsqzMFwoRJHdwYfcDt9xyi6Zpv/3tb997\n773vv//+888/nz9//ksvvXTllVfmUrxPnz4DBw586qmnDhw4sHfvXvKhVrdu3SzL2rFjh2EY\n77333o4dOwCgurp68ODBkUjk2Wef1TTt+++/dx+c9enTZ/DgwStWrIjFYqlUavny5X6/330N\nJRf69++fbUbzG+MHaPYDgKqq+/bti8fjjYqk0+lDhw4dOnRox44da9asmTt37vnnn09exmLU\nBgAXXHABCXM02B3UZNORd9G2bdtGjMxjvbtx48aKigrTNNevX29Z1siRI2l1btq0afLkybt3\n77Ztu7a29l//+hetTl3Xs5siE1qjNVJRUVHR5OPFRl02YsSITz75pLy8fNiwYeTIGWec8dVX\nX3311VfkBTtojQFJgzFOTjzxxNNOO+3JJ5+sqqqyLOuNN9647rrr3KsgTwKBwIgRI9auXcvz\nPHEnj0pakfy8o82pXHqBVjZ3yKsjmbAnbDaDBg0Kh8PPPPNMPB7fu3fva6+9Rjvz3HPPPfPM\nM++//35yy42taPPmzRUVFbquv/jii5ZluVcdmRpjsRhNV3l5+b/+9a9NmzbdfPPNPp8v+z1d\nWo/kHv0SicS+DGpra9ke8TwfDAZnzZr18ssvb926lWbApk2bMj/dQ5DcwYXdD5SUlKxYseL0\n009fuXLlb3/72/vvvz+dTi9btsy9n9EkDz30kCzLkyZNmjp16sCBA2+88cZBgwaNHz/+7rvv\nvuyyy7Zt2/bAAw/079//+uuvr66unjt37hdffHHJJZc89thjJL0TeaBwzz33iKJ4zTXXXHnl\nlZWVlUuWLAkEAs1yJNuM5jaFC83+yspKcovITUzl8te//vWKK6644oorZs6cuW3btpkzZ95+\n++1N1gYAY8aMcW99edJkBzXZdNOnT//HP/4xYcKE3//+9+PGjYMc3qokkIdBV1555cKFCy+6\n6KLNmzfPmzcvHA7T6hwzZsyFF154zz33jBkz5re//a37klA2p512WnZTZEJrtCFDhjRS0WRH\nN+qyESNG7N+/v1evXuTNdAA46aSTdF23bXvo0KFuqZYPSE8Y4wQAZs+e3blz5+uuu+7iiy/e\ntGnTggUL3BcfaYwePXrbtm1nn322+wpUHpW0Fvl5R5tTkEMvMMrmSI8ePRodYU/YbBRFWbBg\n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\n03I2bNhw6qmnVlRU/L//9/9Gjhx5tM05guQx/o/uYEM6IB10YffPf/7z5JNP/utf//riiy9W\nVlYGg8Gf/vSnN910kyAIAFBVVTVt2rRdu3Z169Zt8uTJI0eOTKVSF1xwweLFi8n83Ldv31VX\nXfXcc89169btnHPOmTlz5nPPPTd06NA77rijvLz8oYce2rt374knnnjjjTfeeuuta9as6d27\n96effjpmzJif/OQnxIBzzjknEok4jkP+PHTo0JIlSz755BO/3//Tn/70xhtvlCSpUc0VFRVP\nPvnkzp07OY7buXOnp1/XXnvt9u3bAWDz5s0vvPCC4zjLli37/PPPE4lE3759p0yZcvLJJ1uW\n1ajm7777buHChd9///2PfvSjCRMmuLUxbNZ1fcyYMTNmzHj33XcrKysBYOrUqSNHjmxU+cyZ\nM88555xHH330tNNOGz169OzZs995552DBw+m0+lrr712zJgxAOC2WJ8+fd59993W6uLa2tps\n32n9WFJSkj0Y7rjjju3bt3/66acbNmxYsWKFZ4W2bdP8yoXXXnvt6aefblTQsztIwz766KOn\nn366OxIcxxk0aNAtt9xSUlLCsMTzfFoP0prOtdm1ZPjw4U066KkaKAM+U8Udd9whiuKDDz64\nefPmRv0iy3Kz+uJ3v/td//79p0+fTirfvn37bbfd9sILL4wfP/7RRx8dOnRottkHDx5kbKrR\nXGezh9bIkSMLCws3btx49dVXu8Xfeuutn/zkJ126dKmtrX3iiSe2b9+eTCYHDBhA7IeMmdIo\ntuSuN0dHaAMgu0JZlgHAtu233nqrrKysvLz8zTffdBd2jDFJ84Xme6Zt7BPyoFmxgsR8MhOz\nG2T69OnNHWxHwiOkg9NBH8UCwP79+x9++OFbbrnl7bffXrp06ddff/3nP/+ZiF566aXJkye/\n8sorZ5111pw5cxhbDQqCIAjCm2++ed99902dOtW27VmzZvXu3fuVV1654447nnrqKQDgOA4A\n+vbt+7e//W337t1u2eHDh59xxhnk//fee68gCM8///ySJUu+/PLLFStWNKoZAObMmVNUVPTn\nP/9569atNHv++Mc/Dh8+/IILLti4cWNhYeHs2bMbGhpWr1792muvDRo06M4774xGo9k233PP\nPSeccMKrr746f/78N998062NYTNZAb/++uv33nvvunXrysrK5syZU1dXl202ged5QRBeeuml\nu+666+mnn544ceLixYvT6XRmi82bN69ZPcjG03fayZ6DYdGiRV26dLn55ptXrFhBq5DmV45G\nrlixIrtBaN3h4o6E9evX+/3++fPnA72FaefTejD3ptu/f3+TDnqqBq8Bn1nq4YcfTqfTc+fO\nraqq8pykzeqL0aNH//3vf3dfIXj//feHDh2aeassm/zuo3s66zm0BEG46KKLNmzY4Fp16NCh\nrVu3jhs3jngHAH/84x9fe+21U0455c4779Q0jRFbcteboyOezcuo8OOPP45Go7/4xS9++ctf\nbt26lVwnQG6zvpEvnr43si37hL179+bRX2x/myzl2SB5DLYmXUaQ5tJxF3bxeNxxnFAoJAhC\n9+7dly9f7t4dOe+8804++eRAIDBhwgRJkj7++GN2VT/96U/79+/v9/u/+eabgwcPTpo0KRAI\n9O7d+5JLLnHPmTp1Krka+81vfvPQQw+9+eab5EcUAL777rudO3dOnjy5qKiopKTkrrvuOvPM\nMxvVDABPPvnkrbfeqqoqY1fETL799ttvvvnmpptuKiwsVFX1uuuusyzL9SXT5srKyrKyMlVV\nu3bt+t///d+52EwYM2YM2crwvPPOU1X1o48+yjY7k/POO4/smvrjH/84nU4fOHAgs8X69euX\ni18ur7/++jn/iWEYufieDWMw5FJhtl85unDZZZdlNwitO1zckRAIBM4++2xyq4ZhCeP87B7M\nvely2TPeUzVjwAPA2rVrd+/ePX/+fFVVPfuluX1x1llnRaPRr776CgAsy/r73/9+7rnnMmze\nvXv3Z5991qRrOTpLG1pjx46trq52L9Lefvvtbt26DRs2bPfu3d98883NN98cDocVRbn22msN\nw/jwww8ZsaVZepuE1ryMCl9//fWzzjrL5/P17du3T58+GzZsyKyQPeszfaH5ntk1nic0NDTk\n0V9sf5ss6NkgeQw2tssIkgcd9FEsAPTr12/s2LE33njjSSedNGzYsHPPPZc8vwCAnj17kv9I\nktSpU6dDhw6xq3ILVlVVCYLQrVs38mfmHfVQKHTPPfdMnz79888/37Fjx1/+8pelS5fOnDnz\nvPPO279/P8dxbql+/fq5Sxy3ZgD49ttv//SnP/3f//2fIAi5vJl+4MABnudPOOEE8qeiKN26\ndXPvPro1Hzx4kOM4d3fwTI0Mm8kJ3bt3J/8RBKFTp04HDx7MriQT9/EWeYKj63qjFmsWZ599\ndqPfqsmTJ+fiezaMwZBLhdl+5eiCq8UtyOgOF3ckkCKWZdm2Te7AeVrieT45LbsHg8Fgjk2X\ny0LcU7XngCevH7399tt/+9vfFi1aRK5ePPuluX1RVFR02mmnffDBB6eeeip54PWzn/2MYXPe\nt388naUNraKiop/+9KcbNmw488wzbdveuHHjr371K47jiPbLLrsss+b9+/c7jkOLLc3S2yS0\n5j333HM9Kzxw4MDWrVvdjxLOP//855577pprriEDEnKY9a4vNN/d/9NOyFzmNpfmxgoXzxbO\nb7AxXEaQPOi4d+w4jrvtttuee+65c889d+fOnWVlZVu2bCGizNd9OI7L/JPg3vBodL7jODzP\nk2cKAMDzjZs3FAqNGjVqypQpTz/99Lhx4xYtWmRZFqmtUZ2Nat63b98dd9wxbNiwF198Me/v\nDW3bdu9puTWTI67N2R+9etpMRKZpuqdZluX6m91iBFeLS6MWaxahUKjXf8KoJ9P3TO2uYbTB\nkEuF+dnvWbDJ7sgcCX/5y1/uvPNOdoXs82k9mIln03nqylE1Y8Dv2rVr+PDhy5cvJ2Msx35p\nsi9Gjx79wQcfOI6zZcuWkSNHZt9LzkRRFLZfntCcZbgwbty4Dz/8sLa2duvWrbW1teeff76r\n/Z133tmSwYQJE2ixJQ+9zYU0L63CN99807btO++886KLLrroootWrVpVW1v7j3/8wy3e5Kx3\nfaH57haknZD3BGT4m21zoyO0BsljsDFcRpA86LgLO8uy6uvru3XrNm7cuAULFowdO/b1118n\noj179pD/mKZZU1PTuXNnWZY5jnNffaA9aysuLjYMo6amhvzpvp1WVVVFXhjKPPmUU07Rdd0w\njNLSUsdxyAU3AOzcufPVV19tVPOuXbts2x4/fjy56s0F8kL9999/T/5Mp9NVVVWlpaWNTuvc\nubPjOK5t//u//5uLzeTPffv2kf/oul5dXZ3H++aNWqy1oPlO60fGYGBX2LpmA707XBqNhK+/\n/ppdIfv87B7M3VP2J36FhYU01YwBf8stt9x77711dXWrVq0CSr/k0RejRo2KRqNff/31Bx98\n4N5vppHjna1G0JxlDK3TTjutpKRk8+bNf/3rX8866yySn4ho/+6779yayf0bWmzJQ2+T7ns2\nr2eFpmlu3LixrKxs9WHWrl37s5/9jJ11iOYLzfdM2zxPyLw+aS7NjRUutBbOY7AxXEaQPOi4\nC7tNmzZNnjx59+7dtm3X1tZWVFS4AX3jxo0VFRWmaa5fv96yrJEjR5K3KLZt2wYA6XQ6e+FF\nGDx4cCQSefbZZzVN+/77790334uLi/fs2TNr1qwPP/ywsrKyqqrqww8/XLFixbBhw1RV7dOn\nz8CBA5966qkDBw7s3buXfBHZqOZu3bpZlrVjxw7DMF577bVcHOzTp8/gwYNXrFgRi8VSqdTy\n5cv9fn92JoJBgwaFw+FnnnkmHo/v3bvXrZxtMzln8+bNFRUVuq6/+OKLlmWNGDEiF8NoLVZe\nXt7c4jRovtP6kTYYVFXdt29fPB7PsTFbDq07XDJHwnvvvbdjxw4AqK6uplXIPj+7B3P39J13\n3mE4UlpaSlPNGPA8zweDwVmzZr388stbt2717Jc8+iIQCIwYMWLt2rU8zw8bNoxxJgCceOKJ\nTfZsIpHYl0FtbS3NWUacAYCLL75406ZNH3/88cUXX+xqP+2005588smqqirLst54443rrruu\npqaGFlvy05vNnj17iCO05vWs8H/+53/i8fivfvWrbhlceumln332mXvNkA3NF5rvmV3jecJb\nb73F7i9GxzU3VrjQWri5g43tMoLkQcd9x27MmDEHDx685557amtrw+HwmWeeeeONN5Irvyuv\nvHLhwoXfffddt27d5s2bR66kp0+fvnjx4r///e9FRUVXXXXVRx99lH3HQhTFuXPnLlmy5JJL\nLunXr9+kSZNmzJjBcZwgCIsXL3722WeffPLJmpoa0zS7dev285///KqrriIFH3rooUcffXTS\npEmqqo4aNerGG29sVPOgQYPGjx9/9913cxx30UUX5fhOyT333LN06dJrrrnGtu2TTjppyZIl\ngUCg0TmKoixYsGDx4sWXXXZZSUnJlClT7rjjDvJCD9tmALjkkksee+yx3bt3FxYW3n///ZFI\npDk90LjFBg4cmHuAbhKa75796DkYAGDs2LGrVq3asmXLSy+9lEtjthxad7gnZI6EUaNGPfDA\nAzNmzLj++uvJLa5saOcvX74cKD3o6Wn2aP/lL3/JcEQQBIap7AE/ZMiQK6+8csGCBatWrfLs\nlzz6YvTo0ffee++ll17qvvvF4IknnmCfsHnz5s2bN7t//vznP587d66nsytWrLjwwguzXSD8\n8pe/XL16dUlJyeDBg92Ds2fPXrp06XXXXec4Tq9evRYsWNCpUycA8IwttEZm683mwgsvdB3x\n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\nKVOmXHDBBQcOHMjdOHny5BdffLGlQlBp1dNVVVU1f/78K664YuzYsePHj581a9b777/fGoHy\np8n+06xDtcYl27x589ixYxt8TG7cuPH888//97//fTxH5tNSzWnZcXECA7XekKRm4yuvvPI4\nD0v4Dg46BGkRTtKVJxogCMKQIUOcP8eOHVteXp67QygUAoB169aNHDmyDWZCLUUoFHrttddu\nueUWZ8vWrVuz2Sz5f4NWtx4tft40TfvjH/84f/78ljpgPjinq8UXVKioqJg+fXrHjh3/67/+\nq1u3brFYbOPGjXPmzLn22muvvvrqlo3VLPj9p1m0xiU777zz/vnPfz7yyCOLFi0SRREA6urq\nFi9efO211/bs2bMFAzWmRZrTZvmkDQK13pBsnI1luQU+tr6zgw5Bjp+T9I7d448/fv3110+c\nOHHNmjXQ6EdJj8dT8m10Xb/11lu3bNmyaNGiKVOmcI5cUVExa9as8ePH/+xnP5s9ezb5FptM\nJkeNGrV9+3ayz4EDB0aNGkWkL7/88qabbho3btzkyZM/++wz5zhHjx699957J06cOG7cuBkz\nZpBVcUg9V69enWczR4wY8cYbb+R+Er/22mtnnHEG+X9uq1nVeO2118rLyy+44IKJEyfOnz/f\nMAxSt9///vcTJ0688MILb7nllk8//ZTTxsbnLRqNzp49+/zzz584ceLGjRvzbEsul1566d69\ne1999VWqSr0ErLZQ6/Nf//VfCxYscA64ffv20aNHV1VVcX6vp16vJlm4cCEAPPzww127dl26\ndOk555zTs2fPQYMG3XbbbTfddNOf/vSniooKcplefvnlK6644qGHHsonKPUMWJY1atSoTZs2\nzZ49+5prrpk0adI//vEP/pnh959mwb9k1IZMmjTJ6R4rV64cNWpUVVUV+XPGjBnPPPMM+c/+\n/fv/9re/ke2LFi3q2rXrZZddRu2inDNpmubMmTPvvPPOPGftTTanyeh5jotmXWKgXco8E9fs\n2bOp2capMKf/5HNCCru+QMvGnTp1gm/350suuYR3tWgUPOiaO7g4Gb5xJ0GQFuEkndgNGTJk\nxYoVd9xxx4oVK2pra/MpMn/+/I4dO95yyy1Lly7l7DZ37txwOPzcc8+tXbtW1/UHHniAs7Nl\nWb/97W+7d+++YcOGBx544KWXXnKku+++GwD+9Kc/Pf/886effvqdd96ZTqclSZIkyUl5TXLq\nqad6PJ733nuP/BmLxbZs2XLeeeflWY2DBw8+/PDDv/71r1955ZUnnnji888/f+6550jd6uvr\nV6xY8fzzzw8YMODOO++MRCKsOjQ+b3/961/Lysqef/75iy66aP78+clkMs/mOHi93ptuuunJ\nJ5+kXjvqJWC1hVqf0aNHv/POO5ZlkR02b948dOjQ4uJiTpWo16vJhvz0pz89ePDgzp07r776\n6gb3IS655BK/379582Zy0V966aV77rln2rRp+QSlngFRFCVJWrdu3V133fU///M/ZWVlCxYs\nSKVSnDOTZ//JB/4lozbkzDPPdL4nbNu2rWfPnuRPwzA+//zzESNGAEA4HJ42bdrKlSsPHTr0\nwQcfvP3223fccYckSdQuyjmTDz/8cCqVmjdvniRJLdKcJqPnOS6adYmplzLPxNU4SoMKs/pP\nq15fDrn1cWb2eXI8g65Zg4uf4fPPogjSLE7Sid25554LAKeffrppmocOHWrBIz/55JO33nqr\npmkej+e8887buXOnbdusnb/44ovKysry8nJN0zp16vTLX/6SbN+9e/cXX3xxyy23+P1+l8t1\n7bXXZjIZ5/P1wgsvzL8+48aNIw8IAsDmzZsHDx7ceILCqkYsFrNt2+fzSZLUtWvXJUuWXHnl\nlXv27Pniiy9uvvnmUCikadp1111nmuaWLVvyr9KYMWMGDRqk6/q4ceNSqVRlZWX+ZQm2bY8b\nN65v376LFi1qrFIvAbUtrPqMGjUqEok4N1reeeedsWPHcurDv14cTj/9dPKNv1evXg0kSZJ6\n9uy5b98+8ufZZ5/dr18/XdfzCcrphOeffz55rmDYsGGpVOrQoUOcMwPc/rNnz54mG+jAuWSs\nhgwfPpx80ieTyf/7v/+7+OKLyZ+fffaZrut9+/YlxceOHTts2LCHH374scceIz/C8rto4zO5\natWq3bt3P/DAA5qmHX9zmhvdoXE/bO4l5l9KPrNnz6b23gYVbtx/mjwhx3l9X3rppXHf5oUX\nXnAO7tSnWRQ86KCZg4uVWo8/iyIIh5P6GTtVVQEgk8k02P7CCy/kfrUCgCeffLJfv375HHPP\nnj1PP/30f/7zHwAwDMM0TefGT2MOHz4sCAL5ZQEASkpKyH/2798PABMnTszd+eDBg+Q/zXp+\naNy4cU8//fTRo0fD4fBrr712+eWX51+Nvn37jh8//qabbjr11FOHDx8+duzYkpKSQ4cOiaLY\n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\nCxubDUI7lWd1WtM0OVE4asFjs0VSRytF4YxNciuI1RXJPcImO3+TqYNEYVVPkiR+gipgiLVI\n6mil9SG6du0KAH/4wx8GDhxIXobt0qXLhRdeuHr1ar/fT8xQHLp16zZjxoyvvvqqT58+//jH\nP55//vmysjLyDeHhhx8eO3bsT3/609tvv71z587vvPPOQw89dOWVV+Ks7oSDL08gCIIgyMnC\nDTfccMYZZ9x3331z5sxxNk6ePBkALrvssga/9Xs8ntWrVz/77LMTJkxYuXLlDTfcsHjxYiL9\n9Kc/3bx5c6dOnW655Zaf/exn69atu//++5cvX96WbUGo4MwaQRAEQU4WSktLt23b1mAjecax\n8ZsQtm2feeaZb731FvVQZ5999saNG1ujksjx0HYTu1deeWXDhg01NTUlJSVlZWUjRowo7Dix\nWGzZsmWffPJJJpPp37//1KlTO3bs2LIhEARBEOQkIZPJ3HvvvT/84Q/POuusE10XpAXIa2JH\nVmKmSoIg+Hy+oUOHzpw587zzzmMdYdOmTWvXrp02bVr37t3ff//95cuXDxw4kNhVc4jFYgcP\nHuzXr1/uxgULFsRisblz57pcrtWrV997770LFy4URbGwEAiCIAhycrJv376PPvrov//7vz/6\n6KP333//RFcHaRnymtjdeOONW7du/eCDDwYNGtS/f39BEHbt2rVjx44f//jHPXr0qKqqeu+9\n98aMGfP3v//9oosuoh5h7dq15eXlZA2TCRMmOI9n1tbWrlix4tNPP00kEn369Ln++ut79+7t\nlKqoqFixYsXjjz/ubKmurt66dev8+fN79eoFAFOnTr366qt37NgxZMgQVggEQRAEQRrz+uuv\nX3/99T179nzxxRfxN652Q14TuwkTJmzYsOGtt94iy4kQtmzZcvnlly9YsGD48OF1dXXjxo27\n//77qRO7mpqayspKAJg+ffqhQ4d69Ohx/fXXn3rqqQBw//33d+rUadGiRS6Xa926dfPmzVu5\nciXnxfU9e/YoikJmdQDg9XpLS0t37dpVWlrKCoEgCIIgSGMmT55MXpug8u6777ZlZZAWw86D\nM844Y8WKFY23L1myZNSoUeT/a9euJbaWjdm1a9f48ePvuuuuffv2RaPRZcuWTZo0qa6u7ssv\nvxw/fvzRo0fJbpZlTZo06e2333YKfvLJJ9OnT8891GuvvXbNNdfkbpkzZ86yZctYIZzd3nrr\n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\n3z969KjRzXgpz86dOwEgFAqtX79eS1WzZs3eeeed06dPnzhxAm+L+/zzz4cOHXro0CFFUc6d\nO5ebmxszMTHBw4p4r672dxlFeXl52hzQpk2b8vLyJElavXq1LMu33XabURbK0Lx5c5fL9d57\n74XD4WPHjiW2Br9yMaqiMQMSnk/VYFRpy98ZXb6YiubaqMFWiARKf+zYsaFQ6NFHH/3222+P\nHz9+9OjRzz//fNSoURaLpfz0qFFrrWgrLlOyBw8eTCCzBOIvOEycD59l2aeeemrDhg3a0oiK\nKoqHO++8s02bNi+++CIeTjNSUdEKRk4qwzB2u/3ZZ59du3bttm3bEjbLFAoB2rGLl6ysrL59\n+z733HO9e/feuXPn9OnTmzRp8uijjxYXF7/66qt5eXm9e/eePHky/ibG83eTJk2qUaPGI488\ncu+9937++eevvvqqtkhF47777nvjjTe6d+++adOmF1980eVyxUxJ69atyTc8//zzHMf94x//\neOihh/Lz8+fOnWuz2eJMT3k++OCDcDg8cOBAAGjevPndd9/9yiuvENz7Pf74499//33//v0n\nTJjQo0cPOD/7/PLLL5tMpsGDB48ePbpZs2YjRozo2rXr3//+9+eff75r165DhgyplM4EHm3C\nrqq0v8soqlOnzogRI/Ak+EMPPTRr1qx77rnniy++mDZtmtPpJGQhGo7jpk6dumfPHlyCWGM8\n8zIXD6MqGnPnje7zqZo0axhV2jJEly+mork2m81GDTZ+Eij92rVrL168uE2bNosXLx48ePCY\nMWPWrVvXtm3b5cuX69Z8o9ZaoVZcpmS1hV+VSJwFh4n/4V977bX33XdfSUlJYoriZNy4ccXF\nxdoma10VCTSrmEnNzs5+6KGHXn311eLi4sTMMoVCAFXUolUPTpw4Eb3G7pKAPTC99tprN998\nc4UCErwcFRYWnjt37oKTdmlISkrSXEyVpwrmOiuKLMuqquLZol9//XXUqFH/+c9/yr9srFYr\nYc7oMsxXnDAM06hRIyNpbm7u5ePcu6IQmtjJkyexg+I4S/+ygpCvoqKiK3egyO12ExaxXLlN\nTBCEi9EXp1R76IgdhZIIqqrm5OTMmjXL7/efO3du+fLl2dnZl/l7nVJZ0NKnUCiXLbRjR6Ek\nAkJo2rRpBQUFDz744ODBgy0Wy7PPPnupE0WpImjpUyiUy5ar1N3J5QDLst98882lTgUlcRo0\n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\nYocgCIIgCDJAwIkdgiAIgiDIAAEndgiCIAiCIAMEnNghhWPb9te//vW33nrrSDfkiDEAjgDt\nwuuvv36kGwLTp0//+9//3s9Gve73w6k8Ih08GhiQHT96HAdBOnCc5rH79a9//b3vfU+ciOto\n45///Kff7x87dqx4N9u2N23atGXLlgMHDliWNXjw4AsuuODyyy8vrLPXXnvtnj17AIAQEgwG\nR48eff7555977rmEEACQJGnFihUjR44soOa+w2tzLrfddtsFF1zQ67b6+gj07tnMHUJdHE59\nTReb0djY+MQTT2zbtq25ubmoqGjcuHGXXXbZpEmTerElfXQqj0gHCzu5fTfY+pR//vOf5eXl\nXUzk27t9RJCjk+N0Yveb3/wmHo/PmjXrSDekG2zevPmss87KGyhra2u3bt16yy23jBkzBgDe\nfvvtFStWZDKZgjt7wQUXzJo1y7bthoaGnTt3rly58h//+MeSJUskSSKETJ48ubBq+5Rzzz23\nuro6d0tJSUlfGOrrI9C7ZzN3CHVxOPU1XWnGv//973nz5kUikeuvv/6kk05qa2t74YUXfvKT\nn/zsZz/72te+1lst6aNTeUQ6WNjJ7bvB1qds3rx52rRpX//617uyc6+HRwQ5CjlOJ3ZLly5N\npVL0//X19Y888siuXbtc150wYcKNN95IF0pqbGxcuXLlm2++6ff7zz777Ouuu05V1enTp99y\nyy1PPPHEaaeddttttzHLOo4zbdq022+//c9//vOBAwd8Pt+iRYtefvnlt956q7W19dJLL505\ncyYAtLS0rFq1aseOHclkcuzYsddff/2YMWNo2cWLF//lL385dOhQOp2++uqrzz///JtvvnnH\njh1vvfXW888/v3XrVkHX3nrrrfPPP//LX/4y/XP69OnhcNh1XUFneUZpEcMw6IpYgwcPnjx5\n8pe+9KXrr79+y5Yt5557rm3b06dPf+CBB774xS8yuwMAdXV199xzzyeffHLyySdfd911N998\n84YNG0aMGNHS0rJ69ert27cnEolRo0bNmTNn6tSpvE5dfvnlb7/9dtfbHAgEOq92RVvbxdPH\nrJk3JOgRePHFF5966qmDBw8Gg8Gzzz77hhtu0DStsbFx9erVTz75ZLfGZxfPJu+YM/uVO4T8\nfr/3/0ceecQzx6uwAM4991x6Wk855ZRUKvWtb31rxYoVdOa0b9++K6+88oknnnjggQe8ZqxZ\nswYAYrHYggULtm/fHgqFrr322vPOOw8Ali9fXlxcXFtb6y0wcNppp5WXl9fX19N5D7O/nU93\n5yF3yimneA32BvMXvvCFioqKffv2MfvV3Nx8//33d6ikrztYcKx45JFHcg/Chg0bBKcs72Dr\nfPR62PFuDWAA6Oxit912GzV0/fXXd2VYCvpomub5558/f/78V1555eDBgwAwd+7cr371q7y+\n51Zr2/Ztt92mKMrdd9/973//u1tRpRedDkEox+n95zPPPPNLX/oS/f+SJUsikcjvfve7TZs2\n+f3+pUuX0u0///nPZVn+7W9/u3Llyp07d65Zs0aWZVmWn3322TvuuGPu3Lm8spIkybL83HPP\n3XPPPb/97W/D4fDNN998yimnrF+//rbbblu/fn1raysALF68GAD+8z//8w9/+MOpp57605/+\nNJPJ0LKbN2++/fbbf/3rX1dVVa1YsSKdTi9fvry8vPzHP/4xjZICRo0a9be//S33WeQZZ5wh\n7izPKLP+MWPGnHnmmVu2bOmwndkdx3EWLlw4YsSI//qv/7rtttt+9atfAQB9jLt48eL29vb1\n69f/4Q9/mDBhwk9/+tO2tjZep8rLy3vSZkq3Th+z5s5Dwqt8//79v/zlL2+88cYXXnjh4Ycf\nfv/993/3u9/RIopS+OWT+GwyjzmvX7lDiDeceBUWwLPPPktPazQa5e3TuRm///3vq6qq/vCH\nP3zrW99avnx5KpVqa2vbvn37zJkzOywbNXv27B/+8If0/8z+dj7dnYccs210APDafMstt3Sl\nkt7tYMGxovNBEJB3sPVux3n9As4JZboYNbRgwQJx17rSR3rS//jHP/785z/fuHFjdXX1kiVL\nvFgt7vsvf/nLdDpdU1Mjy3J3o0ovOh2CUI7TiV1LS4v3/0ceeeTmm282DCMQCHzjG9+gV1r/\n+te/du3adc0110QikYqKittvv/3MM8+k+5999tljxozx+/28snS36dOn+3w+WZYnTJjg8/no\n7ahTTz3Vtu0DBw7s2bPngw8++PGPf1xUVKTr+tVXX21Z1quvvkrLnnfeefTR4emnn55Opw8c\nOJDb+HfffVfQtblz59LLvh/84Af33HPPs88+S2OToLNdMZrLiBEjOqyrzevOBx98cOjQoVmz\nZgUCgREjRlx88cV0/w8//PCDDz644YYbSkpKDMP40Y9+ZNu24PXqe++9t4dt9uji6etcs2BI\nAEA8HnddNxQKybI8ZMiQ2traK664gha54YYb8raKh+BsCoaQoF8CxGOyu3inddu2bV0vNX36\n9FNOOcXv93/zm99Mp9MHDx6k53T48OGCUoL+eqebOeS61TbKe++915NKCuhgT2IFJXfMCxAM\ntp4fvc4d7+4AZrpY1xuQt4+U888/PxKJAMB5551nGMZrr72Wt++PPvronj17li5dahgGr/F0\nz84nq3edDkEox+mj2O985zu33HILfRzw4Ycf/uY3v/n3v/8NAKZp2rbtOM7+/fsJIYMHD6b7\njx49evTo0fT/uc/4mGXplV9ZWRndR9O00tJS7/8AYFkWvdX/3e9+N7dV+/fvp//xXgSm+5um\nmbvbxx9/3OFBQC6hUOhnP/vZTTfdtH379vfee+/3v//9ww8/LO4sbbDYaC62bXe4pUHneZ27\n47quLMveYfQeMRw4cECSpJNOOon+qev64MGDve53pqqqateuXV1v8x//+Mdnn302t4ZHHnmE\nWu/i6etcc0NDQ+ch4a1zP3r06Isuuui6664bN27clClTzj333IqKCjqKTjzxRF6/8iI4m7xj\nLu6XAEGFhUFPa0NDQ9eLeGeH/kZ6J9Q7zkwE/fUqZA65brWN0sNKCuig+Lx0xW07v5bARDDY\nen70OnecPuzu+gBmuljXG5C3j3SHIUOG0P/IslxaWnro0KFgMCjo+wsvvPC3v/1t+fLloVCI\nbulWVBEcBAQpmON0Yve9731v+fLl06ZNO3jw4G233VZdXX3fffdpmvaPf/yD3hin11jM+xyq\nqtL/7Nu3j1mWQh84dv4/Rdd1APjLX/7S4fkLb//uEgqFpk6dOnXq1Dlz5qxevVrc2e4aff/9\n94cNG5a7hdedLVu20G8s6J+CT88cx7Esi6f+x3/8x5IlS7re5m984xsdrua934ACTh9FMCTo\n/j/5yU9+8IMfbNu27bXXXnviiScWLVpE+9uVu2VimGeTd8zF/RIgHpOFwTytggPSeYQMHTqU\nEPKvf/1rwoQJudtt26ZDS9xf73R3sW3dpR862PNY4R2Ejz766OSTTxbvzBxsnXfrece7O4CZ\nLtbFbya63sdsNuvtRk9B5+K5fd+9e/cZZ5xRW1u7evVqWZa7G1X6wukQ5Dh9FDtp0iTTNC3L\n2r17t+M43gsu77//Pt2hsrLSdV161QUAu3bteuaZZzpUwivbFeg841//+pe3petXaYKnNgcO\nHKipqelwJX3qqaeKO9st/v73v+/YscO7wKXwulNWVmZZVnNzM93ovdpC3yb+6KOP6J/pdLqh\noaHDZDGX6667rlttDoVCwz9P57jZ3aMhHhK2bbe1tQ0ePHjGjBn33nvvRRdd9Mc//pEW8brZ\nXRoaGgRnk3fMCz7LPRmTTOhprays1DSNEOK9OdSVJ+YewWBwypQpTz75ZCKRyN3+61//ev78\n+dDl/jKHXGVlZXc7xaykTzvYi+dlx44dPEkcOnhHrycd7+4AZrpY181BPoeif3ofzZim2dTU\nVF5eLh45N954489//vPW1tZ169YJGt/dg4AgPeE4nditWrVqypQphmEMHjzYtu333nvPsqwt\nW7a89957ANDU1DRy5Mjx48f/6le/OnDgwCeffLJs2bLOP8+8sl1pwMknn/yFL3zhkUceaWho\nsG37T3/6049+9CNvAsTEMIx9+/bF4/EOV/a5lJeX7927d+HCha+++urBgwcbGhpeffXVNWvW\niDsrbmo6nW5sbGxsbHzvvfc2bNhQU1PzzW9+8+yzz+5KdyZOnBgOhx9//PFMJvPRRx95j0dH\njhw5ceLENWvWxGKxVCpVW1vr9/vPOeccXhveeuutAg6ymO4eDfGQeOmll6655po9e/Y4jtPS\n0lJfX19RUUGLPPTQQ4W1sKysTHA2ecdc0C9vCHX4P6WAMSnAO61f/epX6UtRb7/9NgCk0+nc\nCXHnZnTmxhtvzGQy//f//t8tW7Z89NFH27dvX7p06ebNmy+//HLo8nlkDjn6zWO3mDRpUudK\n+rSDPYkVHbYPHTqUV0QcOnhHrycd7+4AZroYNeRdbokROxTd5+WXX66vrzdN86mnnrJt+6yz\nzhKPHEmSgsHgwoULn3766TfeeKO7UaV3nQ5BKMfpo9hp06ZddtllADBhwoSZM2cuWrSIEDJ1\n6tS77rpr/vz5s2fPXrdu3T333PPAAw/MmjXLMIypU6ded911HSoRlO1KGxYvXvzwww//6Ec/\ncl13+PDh9957r/cqHpOLLrpo3bp1W7du3b59O28fWZZXrFjx+OOPP/LII83NzdlsdvDgwV/7\n2teuvPLKghv84osvvvjiiwBgGMaIESNuueUWZqZfXndqampWrlx58cUXjx49etasWfPnz6fP\nI372s589/PDDP/zhDx3HGTdu3MqVK4PBIK8NV199teM4BRxkAQUcDcGQOP/88w8dOvSzn/2s\n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\ni2XZ9u3bk8CO0EL0NiEajc6bN2/cuHFjx459/PHHa2pq8PGampqnnnrqpptuuvHGG++7776d\nO3e2uCir4wQCgdC63Hnnnbm5uXiv2Gbx8MMP5+bmlpaWNldxyZIlubm53377bXMVV69enZub\nu3r16qacvGjRotzc3I0bNzbXyjvvvJObm/uvf/2ruYr/+7//m5ubu3z58uYqFhcX5+bmPvbY\nY005+YsvvsjNzf3nP//ZXCu7du3Kzc196qmnmqtYXV2dm5t7zz33NFdR1/ULLrhg7NixLVAk\nEDBt9IPA6XROnTq14XG/3z9jxoxWKcrqOIFAIBAIBMJZAtnkm0AgEAgEAuEMgQR2BAKBQCAQ\nCGcI9Jw5c052HQgEAuF0omPHjhdddFHPnj0b3Y26Hu3atTv//PN79+5ts7+OKX6/Pzc3t1+/\nfvbfQDQkJSVl4MCBgwYNakrijEAgkJeXl5OTY/oNhL2VQYMGDRgwoLnpOVwuV79+/XJzc5Oz\nUzUFjuP69OkzZMiQdu3aNcVK//79zzvvPJ/P1ywrPM9jK2lpac1SpGk6Kyvrwgsv7NChQ7MU\nAaB79+5Dhw7NyMhoriKBgLFMTE8gEAgEAoFAOL0gr2IJBAKBQCAQzhBIYEcgEAgEAoFwhkDy\nHxIIBAIAQE1Nzcsvv7xt2zZJkrp373777bf36tULACKRyNKlS7dv3y7LcnZ2dmFhobEdTnl5\n+bx583788cff/e53hmJNTc2vv/5qFIv3dmuK4u233/7jjz+uXr26urpaEASc19dK8eWXX8a1\nNd2PC2+thnUZhsFniqKIEEokEmvWrDH8+uGHH/DGbizLdu/e/dZbb+3bt+/x+2VUD+tmZ2d/\n88031dXVHTt29Pl85eXlTWnM9PT0n3/+uZ5rgiD069cPK+JLhl3QNO3ZZ581Ltn8+fN/+OEH\nRVEoiurRo8f48eNxyvqTeMma7lc9xffff9847eDBg6+88kpxcbGiKN26dcPXy/yGJpytnKVr\n7A4ePGi1T9+pDx65TKmqqqqpqWnLyrQifr/fZh10SUlJW1amFXE6nZmZmVbS09cviqLwDn6m\nlJaWmu6adSozf/58lmWvu+663r17r1y58ocffli+fLkgCI8++mgkEpk0aRLP8ytXrvz5558X\nLFhAUdTXX3+9fPnyc88994svvujbt+/EiRMdDsfKlSu//vrrgoKCoUOHLliwIBqN3nrrre3b\nt2+K4saNG3menzJlypo1aw4dOqQoyqxZs1avXt1Q8csvv+zevTvHcRMnTmRZ9vXXX9+5c+cz\nzzzD8/wzzzxTXFx8//33d+nSBRvFW1QPHjz4/fffFwShsrLy7bffNvyqrKzs06ePruu//PJL\nfn7+Bx98MGHChDfffPN4/EqunsPheP7550tKSu6///6ePXvOnTv30KFDjzzyiNfrbbRN3njj\njR9++AH7tWDBgrq6uoqKipkzZ65fvx4rTp8+PZFIhEKhnJyc//znPx6Px7hkW7duzc3NvfHG\nG997770dO3aIorhixYqtW7eerEvWLL/qNaYR2Om6PmnSpAEDBowfP56m6XfffXfNmjUrVqwg\nW8oSkiGvYgkEAgFisZjf77/hhhsyMjI6duw4btw4vOV0VVXVpk2bJk6c2K1bt06dOhUWFpaX\nl+/YsQMAZFl+9tlnBw4cCAB33XVX9+7dsSLeUgwAtm3bdtdddw0aNKiJivF4fOTIkV27dt2+\nffvMmTNfeeWVHj16NFS84IILdF1v164d1u3cufNf/vKXSCSCf6zu2bPnsssuy8/Px0YPHjzI\ncdxdd93l9/uff/750aNHA4Dh180331xdXX3NNdfcddddFRUV3bp1SyQSVVVVx+NXvep17NgR\n7wPUrl07iqIOHDjw9NNP9+nTpyltcttttxl+bdu2jeO466+/Pjc3Fytu2LChXbt2w4cPnzdv\n3rBhwxBCyZdMkqT/+Z//6dGjx5133hmJRBKJxK+//nqyLlmz/KrXmMl3aSgUOnTo0IgRI5xO\nJ8/zV155JfbrxPcPwukECewIBAIBnE5nQUFBeno6/rO6upqiqLS0tH379rEs261bN3zc7XZn\nZmYWFxcDwPDhw9u1a+dwOCiK6ty5Mz6hsrISAEpKSmbOnKnrelFRUXl5eVMUf/rpJ3za/fff\nr+v6Sy+9tHfvXlNFAEAIzZw509A1aovfsf7lL38xatu5c+fzzjuvc+fOWDccDgOA4Vf//v17\n9+69du1aXdczMjI++eST9PT0G2644Xj8qle96urqI0eOIITmz58/ceJEADBeHDfaJslXgabp\nuro6HJhixQMHDsycORPXFo5tBGy4hv0Kh8MMw7jdbrfb3bVr15N1yZrlV73GTMbr9Rp+JRKJ\ntWvXpqend+3atcm3OeGsgAR2BAKB8BvC4fCLL7543XXX+f3+UCjk8Xjw2imM1+sNBoNWiosW\nLeJ5nqbpoUOHer1eWZZnzpyJF7HZKy5fvhwAvvvuu0svvTQQCGRnZz/88MP4fBvF5Np6vd6v\nvvrK7XazLGta23A4/NFHHyGEkv164IEHfvzxx7Fjx/7yyy8lJSUPPPBAwxx7LfYLAA4cOAAA\nqampM2fOLCgo4Hl+7ty5xvn2bWJchWAwqOv6mDFjGIYxVYzH4wCQfMkMv2688cZoNHreeeeZ\n5g5s+0vWLL8akuzX2rVrTa8X4SyHBHYEAoHwXw4fPjx9+vR+/foVFBTgI8lRnQ0HDx6cPn36\ngAED3n777WnTpqWnp7MsO2PGjEQi8e233zaq2L17dwC46aab/H4/RVHjx49HCG3evLkpRnFt\nv/nmG0VRBEGwOfOcc84x3EEIKYoyd+7c3r17v/766zk5OV27dp09e3ZtbW2r+IV1FyxYAABT\npkzJzMwUBMHtdjfXLwD48ccfAWDYsGFWJ//zn/8EgORLZvhVVFSUlpb2n//8p55fx+Naiy9Z\ns/xqSPL1KioqGjVqVMPrRSCQwI5AIBCOsm/fvoULF44aNeqOO+7AAZDP5wuFQskfmQWDwYbb\nJGzbtu3+++9vqCgIQrt27aqqqhpVxO9PXS4XVqQoKhAI4Ge2qWJDo+vXr+/Tp49pbY0zr7ji\nCnwcW9m+fXtZWdmECRO8Xm8kEhkyZAjP8//3f/93/H4ZupdffjkAuN1uQ9fwq+mNiV96Ju/z\nYSjikwcPHowQMmpYV1dn+IWXo7Esm+zXSblkzfLLlB07diT7dcMNN9S7XgQCkMCOQCAQMGVl\nZa+99trNN9989dVXGwezsrJkWS4tLcV/4uX5ffr0SVbUdf2pp5665557rr766v379y9cuFBR\nFKy4Z8+eI0eOdOjQoVHFQCDg9/v37t2LFffu3XvkyJH09HRTRQDYvXu3oQsA0Wj0hx9+GDZs\nWMPaOhyO5DOT/aqoqNB1XdM0w4qiKMfvV3L1Ro8ejf0yjFZWVuK1jI22CT4SjUbLyso0TWt4\nFQwreXl5ya6pqor9Mk6ut/lb21+yZvkFFui6bviFSb5eBAKG5LEjEAgEkGW5qKjo97//fYcO\nHfBsDQC43e5AIJCfn79o0aIpU6ZwHLd8+fIePXrgzGG1tbWqquIZmhEjRng8nvLycl3Xv/nm\nG1EUx44dO2jQoEceeUQQhK5du86bN89ekef54cOHv/XWW5mZmeedd95jjz3GsmxGRkZDRfwB\nxHPPPTdixAijtrt371ZVtVevXvVq27179zVr1lxzzTU+n6+kpOTXX3/VdR2bGzJkyLp161JS\nUl588cVoNNq9e/e9e/dGo9GsrKyqqqoW+1WvejU1NcOHD1+5cmX79u27d+/evn37qqqqdu3a\nlZeXN9qYPM8DQFlZmaqqubm59a5Cz549J0+efOmll3o8nl27dum6XlJS4nK5UlNThwwZsnnz\n5hdeeOGGG2544403AoFAKBTKy8s7WZesWX41bEx8id1ud+/evf1+/8svv3zbbbdxHPfhhx9G\no9HkoJZAAJLH7qSjquqIESOeffbZ3NzcJqqQPHanFySP3WnBvn37lixZUu/gpEmTrrrqqlgs\nhhP5qqqak5NTWFiIX5ZNmDDh8OHDpqVlZGTU1tYyDMNxnCzLuq43UfHcc88tKyuLRCJutxtP\nzDRREQAQQu+9954kScm1HTp06NNPP216/rhx4w4ePLh58+ZYLIYQYlm2S5cut9xyywsvvNDq\nfgGA0+mUJKlnz55er7ekpKTpjTl8+PD169e//vrrOBexofjLL7889NBDDc+fMGHCiBEjnn/+\neZygmKbpbt263Xbbbf379z+lLpmVX1aKEyZMuOaaa/bv3//qq6/iBjznnHNuueWW/v37WzQ5\n4SyFBHb1UVV11apVn3/+OU561KFDhyuuuOJPf/oTnsn/4YcfnE5ndnY2AEyaNKlv375//etf\nj6cmuq5v3769R48eeA1KU2hKYGfvxanJ8QR2c+bM+eqrrxoev/zyyx944IFWqNxx0IqBXWFh\nYbdu3e6//37jyNixYzt27Pjss88aRyZPntyhQ4cHH3ywWZVMvrGbiH1gN3bs2C+//LLh8WZd\nkUmTJv38888vv/xyRkaGcXD8+PHXXXfdNddc0/SqmpZcUlKybNmyZBdUVb3xxhtramr2799v\nfKVIIBAIpxdk8KrP4sWL169fP336dBw/bdmyZf78+aIojh8/HgDefvvt/Pz8Zj3/7EEI4dyV\nrYu9F2ceU6ZMwQuZy8rKHnrooaeffrpTp04A4HQ6T3bVWhO8MYCu63jldUVFRU1NTVVVVSKR\nwN9CRqPRPXv2XHfddc0tudVv7L/+9a8TJkyA474igiA8++yz8+bNa62KGfj9/rVr1959993G\nkU2bNpEVSwQC4XTn1J2/OVl8//33l19++QUXXBAIBAKBwIgRI2bPnt2vXz8AmDZt2oYNGxYu\nXDhp0iSbEmpqah555JHrr7/+iiuuuPvuu3fu3AkA8Xh82LBh27Ztw+eUl5cPGzasvLxcVdVh\nw4Z9//33ALB27dqCgoLLL7/8+uuvnzdvniRJJ8KLu+++O/kxuXv37uHDh1dUVAwbNuyjjz76\n05/+9NRTTwFAWVnZfffdN2rUqKuvvnrGjBk4YycAHDly5KGHHho5ciSuZCKRsHLNPzFqKwAA\nIABJREFUyqOampq5c+def/31I0eOnDp1aqu8iwwEAhkZGRkZGXjOLz09Hf9ZV1fX0AtN04YN\nG/bpp59OmzZtzJgxeLfHf/zjHxMmTLj++uuLiooAQJKkYcOGffjhh1OnTh0zZsyYMWO++eYb\nbMuqZdqA/Pz8mpoanCIBADZs2NC/f//27dtv3boVH8E30vnnnw/W7dzwojTxxm4WqamppldE\n1/WGtfr0009HjRplrCKYPn36nDlz8L9Hjx5dWlr6ySefmFox9XHMmDGffvopPmHFihXDhg3D\nGWgBYOrUqW+88Qb+9+DBgz/77LPkSG7t2rXnnntua7UAgUAgnBRIYFefnj17fvXVV8nRxuDB\ng4cMGQIA8+bNa9++/d13391wLU4ys2bNwrkr33///b59+z7wwAP2CScxFRUVTz/99F//+teP\nP/74xRdf3L179zvvvHMivLjqqqu++OILI2pcv379wIEDO3XqRNP0v/71r4cffnjy5MkAMHv2\n7EAg8M4776xatcrpdD7xxBP4/L///e80Tb/55psLFizYsWOHTVNYeTRr1iwAeOWVV95///3+\n/fs/8MADDbcwby1MvaAoiqbpDz/88PHHH3/zzTe9Xu+0adP69eu3fPny+++/f/ny5bW1tXh/\noTVr1vz9738vKioqKCgw8kVZtUwbkJWVlZqaumHDBvznxo0bBw4cOGjQoI0bNxpH+vXrh1/r\nm7az6UVp4o3dKpjW6rLLLhswYMCiRYsA4LPPPistLZ06dSo+3+1233HHHS+99JJpsi7T0nJz\nc42fGVu2bOnatSv+U5Kk3bt3Dx48GIt69+7tcrmMdGWRSGTDhg3Dhw8/sf4TCATCCYYEdvWZ\nPHlydnb2nXfeefPNNz/++OP/+te/mpX+cd++fXv27ME7MwqC8Oc//1lVVeNJbEMkEtF13ePx\n0DTdqVOnxYsXjx079kR4MWzYME3Tvv76awDQdf3LL78cOXIkFv3ud7/r1asXfln20ksvTZs2\nTRAEl8s1fPjwvXv36rr+448/7t27d+LEiXiGbObMmXhyqOkelZSU7Nmz5+67705JSeF5/vbb\nb5dludE0py3G1AssGjFihMPhoGm6b9++Dodj6NChANC/f39VVY29Fy+//PJAIAAAl112mSAI\n3333nX2ZJxqE0AUXXIDDOEVRtm7dOnjw4Ly8PCOw27RpE95c0qqdW/c2ay42V//ee+/dvHnz\nl19++Y9//GPatGk+nw+r6Lo+cuTIrKyshQsXNrG0vLw8HMnF4/Gffvrpqquuwn/u2rXL6XRm\nZWUZJYwcOXLt2rX431988cWAAQPS0tLaoB0IBALhxEHW2NXH4/E89NBDU6dO3bp1665du957\n770XX3xx+vTpl112WVPUf/31V4qizjnnHPwnz/MdOnQw3gTZkJWVhRNX9u7dOy8v79JLL01e\nMN6KXgiCMHz48LVr115yySXbt2+PxWK///3vsVayxX379r322mu//PILAEiSpKqqpmkVFRUI\noQ4dOhh1zsrKwpv5NNGjgwcPAsD111+ffGZFRUWLPbXH1As8G2c8wjmOS01NNf4NALIs4z/x\nsjAAoGk6NTUVf6RmU2YbkJ+fv3bt2kgkUlxcLAhCVlZWp06dHnnkkYqKClEUDx8+nJ+fDwBW\n7fyHP/yhFW+z5mJz9QOBwJQpU+bOnTts2DDjhjS49957x48fv2HDhuQfElaljRo16tFHH62p\nqdm3b19WVlZubu77778PAD/88ENeXl7y90MjR4587bXXampqAoHA2rVrb7rpplZ2mEAgENoc\nEtiZ4/F4hg4dOnTo0MLCwkWLFs2bN++SSy5p2cNb0zQjUDBoOMeDELrnnntuvvnmDRs2fPfd\nd2+88caDDz7Y9K1mTLHy4qqrrrrrrruqq6vXr18/bNgwYw8iY4vJ8vLy+++/v6Cg4KmnnuI4\n7ptvvsHvvHC17SeoDKmpRziB07///e822N/Qygujeqb/TiZ5AZaqqhRF2ZfZBuTm5tI0vWXL\nll27duXl5SGE3G53dnb25s2bRVHs1KlTly5dAMCmnVv9Nms69le/oqJCEAS88LReX8vIyBg3\nbty8efNeeeWVppTWs2fPHTt27N69e9CgQV27dg2Hw9XV1Vu3br3qqquST0tNTc3Ly/v0008v\nvPDC8vLyiy666PTNPkMgEAgY8ir2N1RWVs6ZM6feBFv//v0lSWoYnJmSkZGhadrPP/+M/0wk\nEpWVlZmZmRzHIYSMxWTGyz4DVVXr6uo6dOhw7bXXPvnkk6NGjVqzZs0J8qJ3795du3Zdt27d\nV199ZWwxlExxcbGmaWPGjMGPzN27d+PjmZmZuq7jySoA2Lt37+rVq61cM/UIzw8Zy//hRE7X\nWXnRdIwPIyRJqqqqat++/fGXeZwIgjBo0KDvv/8ev4fFB/Py8r7//vvvv/8eT9fBscnXhu3c\nirdZC7C5+j/99NPKlSvnz58vSdLKlSsb6o4ZM8bpdK5YscJIRGJT2uDBg7dt27Z169ZBgwYh\nhPr167dx48Y9e/YYLWZw5ZVXfvHFF+vWrbv00ktJihMCgXAGQAK735CWlnbgwIG//e1v3377\n7aFDhyorK7/99tslS5bk5eXhaS08oxCJRPD50Wi0PImampoePXrk5OQsWbIkFArF4/HFixc7\nnc6LLroIL2nasmULACQSidWrV9cz/emnn06cOLGkpETTtJqamrKysha/I2vUCwC48sor33jj\nDZfLhT+VrUeHDh1UVd21a5csy59//vmuXbsAoKqqqkePHn369PnHP/7x66+/Hjx48Lnnnvv5\n55+tXDP1qGvXrueee+5LL71UWVmpquoHH3zw5z//ubq6umWe2mPlRdNLWLduXVlZmSRJb731\nlqqq+fn5x1/m8ZOfn7958+bS0lIj4/yQIUN27ty5c+dOvMAOAKza2eo2q3djnyCsaqWq6pNP\nPjl69OhevXrde++9b7zxBt5DMxmapmfMmPH+++8fOXLEvjQAyMvL27x58/79+3NycgBgwIAB\n77zzzjnnnINXTCaTn59fXV29bt06Y6UpgUAgnNaQX6i/gabp+fPnv/766y+99FJ1dbWiKB06\ndLj44otvueUWfMKoUaOWLVu2fv36t99+GwDWrVu3bt06Q/3iiy+eM2fOQw899OKLL952222a\npvXu3XvBggUulwsApk6dOn/+/K+//joQCNxyyy3fffddcmr+yy+//PDhww899FBNTU1KSsr5\n559/xx13nCAvsLnFixdbPcz69u07ZsyYBx98ECE0dOjQRx999N57750wYcKyZcsef/zxZ599\ndvz48YIgDB06FFfS1DUrj2bNmvXiiy/++c9/1nW9W7duTz75pLHErXWx8aKJJVx33XXPP/98\nSUmJ3+9/5JFHvF6v1+u1KtNYeniiyc/Pf+GFF3r27GmEKb1795YkSdO0QYMGGaeZtrPVRal3\nY584TGv12muviaJ46623AkBOTs7IkSOfeOKJxYsX19Pt3bv3dddd995779mXBgD9+vU7cuRI\nr1698OvaAQMGLF682HQJHU3Tl1122ZYtW3r06HEC3SYQCIS2guw8cfrRKluKlZWVFRYWvvXW\nWw3nME4Wp9SWYnirt6eeegrniDkeyJZipx02XYxAIBBOcciM3VmHqqpHjhx5+umnr7nmmlMn\nqiMQCAQCgXD8kDV2Zx2vv/767bff3qVLF7zjE4FAIBAIhDMGMmN31nHbbbfddtttJ7sWpzo0\nTa9fv/5k14JAIBAIhOZBZuwIBAKBQCAQzhBIYEcgEAgEAoFwhkACOwKBQCAQCIQzBBLYEQgE\nAoFAIJwhnKUfTzAMY+yLeiZB0/Tp65f9VrzEr1MNirL7WciyrP0JBAKBQDgRnKWBncPhYBjG\n6/WyLGu1H5TX641EIqZJVj0eD8/ztbW1VtJEImG6t6zL5XI4HMFg0EqqKIqx6WoygiC43e5w\nOGwqNeA4zuPxtNiKw+FwuVxWVhwOBwDE4/GGIp7nPR5PNBq1kjIME41GG4oYhvH5fPF4PBqN\n4k0CrMBt3jIrLMt6vV5sxVQqCEI4HG4ooigqEAiIomgl9Xg8wWDQtMJpaWmyLAeDQfvQzePx\n0DTt9/utrNA07Xa7Ta0ghFJTU7EVU6nP56utrTW1GwgEdF23kVpluvb5fAzDVFVVIYQsvQJw\nu92apqWmpmqa1jIrNE1b7TXn8/mCwaBpcvWUlBSO46qrq62ksVhMURTTCguCUFdXZyolEAiE\n0wXyk5pAIBAIBALhDIEEdgQCoTnUmM9wEwgEAuFUgAR2BAKhSVC11cIH76rzn9KrDp/suhAI\nBALBnLN0jR2BQGgG8Rj/7Vfcti2gquicrqCqQJPfhAQCgXAqQgI7AoFgjaqyO7fxX3+B4jHd\nk5L43TD3Rb9HLAsWnxwRCAQC4eRCAjsCgWAO/fNPwvpPqarDOsuKF14sX3CRTjNg+zEsgUAg\nEE4uyDQpwBmPLMsURVEUhRAyTVkCABRFaZpmJbJX1HXdtGGxoqZpVlIrRYQQro+u6zZ50SRJ\nomm6VayYSgGgZYq4PlaKuq5rmqaqKsdxVq6pqtoqVpqlCAA0TVspgu1NYihqmmaT8QTfRcdv\nxUpqdZfiu8jyHj5UIf9rtV72IyBEDcpFV4xCnhSjMsbNb3MrKoqCELK3YlO9k9s37VMPEggE\nwqnMWTpjF4vFZFnGeeyskmw1mscuFAq1LI9dOBxuWR67aDQqimJaWpqVX7Ish0KhFlvBeeyw\nFVMp2Oaxi8fjLctjl0gkotGow+GwCexqa2tbbAXnscNWTKX2eewkSWpZHjtFUXAeO6/Xa+MX\nzmNnZaXRPHbYiqm0BXnsUCTMf/sVu2MraJrapZs47DK1XTooKhw7E+exq62txdat/AqFQk3J\nY2clwnnsbKT2eezq6upalscuFAopimLTxQgEAuEU5ywN7AgEQj2QIrPfb+Q2/B8SRdSufTz/\n93J235NdKQKBQCA0DxLYEQhnPbrOluzhvlxHhYK6wyH+/hL3ZVfKFjORBAKBQDiVIYEdgXBW\nQ1WUC+v/TVccBJqWzhsiXfQHXRCALDIjEAiE05O2C+w+/vjj1atXV1dXZ2RkjBs3bvDgwS0r\nJxKJLF26dPv27bIsZ2dnFxYWtm/fvnVNEAinPigRZ0v2yj+VaNGok+M0jgde0Pmj/9d4AQmC\nnppGS5IuOHSe13mh3getek218MF7bMkeAJB79ZEuHqH5/CfJGwKBQCC0Dm0U2H3++eerVq2a\nPHnyOeec89133y1btiwnJ8fpdNprRSKRioqKXr16JR+cP39+JBKZPXs2z/MrV66cO3fuggUL\nKIpqmQkC4fQCqSr90z529w66tASpqoYQIERrmukMmwqQ3AF0jgMc5HG84nDqP5eyiqKmdxSH\nX6ZmdmkjBwgEAoFwImmjwG7VqlUFBQV5eXkAcO2111577bX4eG1t7fLly3fu3BmLxXr27Dlh\nwoQePXoYWmVlZcuXL3/hhReMI1VVVZs2bZo3b163bt0AoLCw8NZbb92xY8fAgQOtTBAIZwK6\nTlccZHfvYIp3oXgcADR/qpzT333RxYonJVRVBYkEEhMgJihJRKIIYoISRQFADNaBmEBiAoki\nEkUkJlCwjpIkHQB5fbELL1ZyBpDUdAQCgXDG0BaBXXV19aFDhwBgypQpv/76a5cuXSZMmNC7\nd28AeOyxx9LT0xcuXMjz/Ntvvz1nzpwVK1bY5LzYt28fy7I4qgMAt9udmZlZXFycmZlpZQKT\nSCSqq6uNPzmOYxgGJ2azylmFk59ZiQDARkpRlGmxhqKV1EqEbVlJk0ugafoEWbFpLntFnCHM\nVIQPYkVkG17g/HyGj82ycoIUcQI8myuCpVb3CaZRv+jaGn3DN+4fNqG6WgAAp0vJO1/NGah2\nzEAIIZ8PKQolCCAI+HwdAOf50BGiPB45FDKxqus+gddZTo9ErGpv0y9spAa4Ve2LarEV3FY2\n2RZtpC3rmwQCgXC60EaBHQB89tlnM2bM8Hq9RUVFDz/88OLFi6uqqkpKSh588EGPxwMAY8eO\n/eijjzZs2DB06FCrokKhkMfjSY4AvF5vMBi0MmHkD9u4ceM999xjaL344ov5+fn4336/5boi\nm/Rj9lKb2BQAsL9WuFwuG5GNFABYljXePp8gKzZvtx0OB851Z4pwLPJoCM/zPM+bZt0zMC6T\n0+m0qYONFUEQbKQ2l4zjOBupzf3DMIzf7zfNmtZQvb6VWEzdsVXbslHbX6brOmJYqk8/+rzB\nVM4A/reRB7bSguohW6mNCEvtc5unpKTggBVn6WuxFSuRz+ezUbSR2iSLBoCUlBQbKYFAIJz6\ntN3HEzfddFNmZiYAjB8/fv369Zs3b8aPsYKCguTTKisrt23b9sQTTwCApmmiKI4ZMwYAMjIy\nnnvuOTj2w7qJJi655BIsSktLGzFihHGm1+sVRZFlWYqiTJPxAgDLsoqimD69sKIkSVZSVVVN\nM+MzDEPTtCzLVlJd102THtM0zTCMoiiqqvI8b1phONZix2nFStFmFwGKonBzWRWLEDKNb7Ci\nqqr20Q8AiKJ4gqzgSRrTsBIhxHGcpmlWUtxcphXmed5QZBjLjiaKIrZytHqKDKX7YNsW2LMT\nVBUQQud0pc4bovbppwmCBgCKAkleJFtpWD2WZSVJMrWLe5+N1EaEEMK9xuZWxFXieV7X9eO0\nYiqVZdmmb9p0avu+iTu1jV8EAoFwitMWgV0gEICkKSKapnHG+c6dOwPAu+++W286RJKkBQsW\nAEBxcXFRUdHs2bPhWFTh8/lCoZCu60Z4FwwG/X6/lQmjzL59+z755JPGn8FgMBwOe71eiqJM\n0/0DgNfrjUajNjtP2Ejtd57A+16YSu13nojH46Io2jx1FEWJx+MttuJwOBiGSSQSLdh5gmVZ\nURRbtvOEJEl45wkb18LhcIut4L0fsBVTqf3OE7Is2+w8YXX/8Dyvqmo4HGZZ1t4vmqY5llV+\n+lHe9B2zdxcSRQDQ0trJvfoq/QaiQKrb7Q4Hg9DgaiKEDCsNS8Y7T1hVD+88YSO1EuGdJ8Lh\nMLZu5Vc0GtU0DYfFLbNC07SNNBwO2+w8EYlEWrDzBE3TWEoCOwKBcPrSRoGd3+/fu3dvz549\nAUCSpCNHjqSnp3fq1AkAysrKsrOz8ZmHDh3q0KEDx3E4g0llZSXDMEY2EwDIysqSZbm0tBQX\nFQqFDhw40KdPHysTbeAdgXD8qJu+g/eKWADd45EGnKfkDFTbHb3tyYIvAoFAIDQdu2XdrWaD\nokaNGlVUVLR169aqqqolS5YIgjB48ODOnTsPGDBgxYoVR44cUVX1k08+mTx5ck1NjU1RgUAg\nPz9/0aJFZWVl5eXl8+bN69GjR9++fa1MtIF3BMLxQ+UMhHPzYjfeGpk0VfzDpUZURyAQCARC\ns2ijNXZ//OMfY7HY888/H4lEsrOzH330UbyM/d577122bNnkyZN1Xe/SpcucOXPwS1VM//79\nk3OdYKZMmbJ06dI5c+aoqpqTkzNr1iz8WtbKBIFw6oNcLvifm1SLN48EAoFAIDSRNgrsKIoa\nN27cuHHj6h33+/0zZsxoVlFOp3Pq1KlNN0EgEAgEAoFwltAWr2IJBAKBQCAQCG0ACewIBAKB\nQCAQzhDaLo/dKQXLsgzD4ASqVjl1KYrCWbgainDuFRspTr3RUIQP2kgpijLdqABnVeU4rtFt\nDHDKEji2u0YrWrHJ7IoNWZ2ALZq2MzbEMIzD4bDP+G/41QIruGRsxVSK262hyNjGwEpqZRGD\npfY7ajgcDiORr1UTNcWKqQghZCMC65vfRtG+1xgIgoB7h30dbKzYSx0Oh03ftJHipDkNRUbf\ntM9gTCAQCKc4Z2lgp+u6Me7bJ9BvmTS5/Ibn20hbpmhlt9WrZ1VmixUbrVLDE1rceo1W3t56\nC0RYah/YNXornujqtbqicUJTupi9qNWlx9/FCAQC4RTnLA3sFEWRZZnneZqmE4mE6Tk8z4ui\naJqCGE/42UglSTJNDoynE2ykVqmDcX1kWRZF0e12W/mlaVoikaBp2r4OVlZwyllsxVQKAKbN\nxfO8IAiKolhJdV03FeFZNKxoPwmUSCQatYKzKzcUsSxrWDGVUhRlKqIoyuVyqapqJeU4zur+\ncbvd+HLYzwDh6+V0Oq2s4KtpKkIIGVZMpQ6Hw6p6TqfT6qJgqZVIEATcXNi6lV+iKGqa5nK5\nWmzFpm8KgpBIJEwjMI7jsKKVVJIk0wTFDMPgXqMoio1fBAKBcIpD1tgRCAQCgUAgnCGQwI5A\nIBAIBALhDKGtX8V+/vnnL7zwwt/+9rcLLrigZSVEIpGlS5du375dluXs7OzCwkJjz7GPP/54\n9erV1dXVGRkZ48aNIztPEAgEAoFAOKto0xm7urq6V199leO4Jp4fiURKSkrqHZw/f/7hw4dn\nz579zDPPOJ3OuXPnapoGAJ9//vmqVasmTZq0ePHiESNGLFu2LBaLtbIDBAKBQCAQCKcwbRrY\nLV68+A9/+IPT6TSO1NbWPvPMMwUFBaNHj545c2ZpaWny+WVlZYsWLUo+UlVVtWnTpokTJ3br\n1q1Tp06FhYXl5eU7duwAgFWrVhUUFOTl5bVv3/7aa69dunRpsiECgUAgEAiEM562C+y+++67\n0tLSm2++OfngY489BgALFy588803c3Jy5syZI0mSTSH79u1jWbZbt274T7fbnZmZWVxcXF1d\nfejQIQCYMmXK6NGjp0+fvnfv3hPmCoFAIBAIBMKpSButsYtEIosXL542bZogCMbB0tLSkpKS\nBx980OPxAMDYsWM/+uijDRs2DB061KqcUCjk8XiSE4N5vd5gMFhdXQ0An3322YwZM7xeb1FR\n0cMPP7x48WKv14tP2759++LFiw2tO+64o3fv3jglqXFOPRiGscp6gLOWeDweqySoNE3bZE/F\nOSBMpRzHJTeRAc4K63Q6TaXJdfZ6vSfICpaavknHIkEQrKQIIdNsyfhS4kwl+JW6FV6vt1Ws\nmEopijK9DbAiy7I2N4mVyJA26lerWDEVWfmFRbquW0kRQlYifHd5vV77fG9utxshZNO2jVqx\nl6akpJiK8CW2ktI07Xa7bfqmlZRAIBBOF9oosFuxYsV55503aNCg5IMVFRUAUFBQkHywsrJy\n27ZtTzzxBABomiaK4pgxYwAgIyPjueeeg2PPWlNuuummzMxMABg/fvz69es3b958ySWXYFFd\nXd3GjRuNM2+99VYju5hNmjH7DGSmUQLGfn8IG0U49oCxEtlvz0BRlFHnE2SlxYo2bYI3VzDN\numdg+HWcVlpd0eYmQQixLGuaNa2h+nFaaUtFLLUPgIydXY7TSqsrHk/fJBAIhFOfthjFtm7d\numXLloULF9Y7judd3n333XoTMJIkLViwAACKi4uLiopmz54Nx+IJn88XCoWSs/kHg0G/3x8I\nBADA5XLhgzRNBwKB2tpao8wLL7zwiy++MP5UVbW6ujolJYVlWTzb15CUlJRoNGqagtjtdvM8\nX1dXZyUVRdE0THE6nQ6HIxQKmUpdLpdV6mBBEFwuVyQSEUUxNTXVtMIAIElSKBRyuVyCIASD\nQdOQolEr4XDY9IU4TiAcj8cbijiO83g8sVjMVIqnyqLRaEMRnm1KJBLRaFQQBJvncXV1Nc/z\nbrc7Go3aJCi2sRKPx02/p2FZluf5SCTSUERRlN/vlyQpHA6bSt1udygUMq1wamqqoijB/9/e\nnYc3Ua4NA79nyUySJk2aFgpSlrIVFFz4WNRX36MCR47SggsKgq30oPSocBRk6QVKRRE3oCCo\nbHW9akGvKHg4eCHLOSKgoG+tVWgLpUIpQvekaZPMTGa+Px6JsZ2ZblhKuH9/tXPPM8/zTJLm\n7iz3uFwGg0HrABKZF8Mwdrvd7/erjoFhmIiICNVeKIpyOByiKGpFbTZbbW2tar9RUVGKouhE\nQz8+oWw2G8uyVVVVpHeteblcLlmWHQ6HLMtt6MVut9M0XV1drTUG8negachqtXIcV11drRX1\ner1anwuj0Ug+1DofMYQQ6uQ6IrH78ssv6+vr09LSyK8ej2fVqlXXX3/9tGnTAKCkpCQhIYGE\nzp07161bN47jSAWT8+fPsywbrGYCAAMGDBBFsbi4uH///gDgdrtLS0sHDx7scDiioqIKCgrI\nckEQKioqYmNjf58ny4Z+ubpcrmBO9mc81OgSPu+oJY+oasnzu3TG0JKuW9hjJ5+X/vBauEOa\nHVKz89LvpdkxdHDD4Ar689IPtfnN1my0bW8ShBC6XHREYpeWljZ9+vTgr08//XRycvKoUaMi\nIyOvvfbazZs3z5s3z+Fw7Nq1Kysra/369TqHARwOx0033bRu3brZs2dzHLdp06Z+/fpdffXV\nFEUlJibm5OTExcXFxcV99NFHRqMR69ghhBBC6IrSEYmd1Wolt0cQFEVZrVZy/Gzu3LkbN26c\nNWuWoii9e/fOyMgIzeqGDh26evXqRlubPXv2hg0bMjIyAoHANddcs3jxYnJa9t57721oaFi5\ncqXH40lISHjxxRf17zNACCGEEAozl+BK4ffffz/4c1RU1Pz581vV3Gw2P/XUU02X0zSdnJyc\nnJzc3vEhhBBCCF2e8FmxCCGEEEJhAhM7hBBCCKEwcYUWbSKlU4M/66/Zko20PNS2hmSh/mab\nbkF/U/obadXwmo128nk1u02taEt2SLNDavO8On6HhEbbOS/9kP7gW9L7nxRFCKFOjroy7+0X\nBIGmaVLdXqt+LMMwsiyr7h/SMBAIaEW1GpIitFoNycMAmm2oU0OVzOui9KIaBQDV5yhQFEVm\nrRWlKKrZhrIsqz5SgpAk6aL0ohols1btl2VZRVG0ogzDNNuwhfPS6uXPHp5WVOdzQT41iqLo\n1B0URZGiqPb3ohXVmXLbPtQt/IghhFAnd4X+/fJ6vaIo2mw2g8GgVT3VZrNP0mjiAAAgAElE\nQVR5PB7V7w+r1crzvNvt1or6fD6tEsQmk8nj8bShQLHFYmloaPD7/TExMVrzEkXR6/W2uReT\nyRQREUF6UY2CRoFinudJ6dc2FCgmtXnr6+tNJpNOAlRbW9vmXsjTukgvqlGj0ahVgtjhcOgU\nKLZarS6XS3XAMTExwQLF+vNiGEanDDJ5CpZqLxRFBcsgq0btdrvW29vhcCjaBYodDodWyG63\nsyxbW1tLeteaV11dnSzL0dHROgWK9XthGEYn6nK5VPOzyMhIjuN0og0NDappn8ViIW8DSZJ0\nPmIIIdTJ4TV2CCGEEEJhAhM7hBBCCKEwgYkdQgghhFCY6KBr7Kqrq7OysvLy8gRB6Nu37/Tp\n0wcOHNi2TXk8ng0bNvz444+iKCYkJKSlpQUfJvvvf//7008/raqq6tGjR3JyMj5SDCGEEEJX\nlA46Yvfiiy9WVlY+//zzmZmZMTExS5cu9fl8zbbyeDxFRUWNFmZmZpaXly9ZsuS1114zm81L\nly4ltzru2bNny5YtM2fOfPvtt8eMGbNx48aGhoY/ZTIIIYQQQp1SRyR2dXV1Xbp0eeKJJ/r2\n7du9e/fk5GS3211aWgoANTU1r732WkpKyqRJk9LT04uLi0MblpSUrFu3LnRJZWXlkSNHHnvs\nsfj4+KuuuiotLa2srCw/Px8AtmzZkpKSMnz48K5du06YMGHDhg1ms7kDZocQQggh1El0xKlY\nq9Wanp4e/LWqqoqmaVJQYNmyZbGxsWvXruV5fuvWrRkZGZs3b9apDXH8+HGDwRAfH09+tVgs\ncXFxhYWFcXFx586dA4DZs2f/+uuvvXv3njFjxqBBg4INKyoq8vLygr8OGjTIZrORwmw8z6v2\nRdM0x3Gqlc9IQ52owWAg6zTCMAwA6EdVkYJhOmXDgl3zPN/mXkj5Lq0iXmS56u4KNtSKMgyj\nGiKDIVHV0QbxPE+m385eVKNkvzUNkSFpNSQV5rTeP3Dh5Wh2XmQFnTG0pBfVEEVROiHQfvO3\nuWEQx3Gk4Ij+pnQ+ffrD0/orEWyoVazOYDCofgSCnxqdDwhCCHV+HV3Hrq6u7o033pg4cWJU\nVFRxcXFRUdGiRYusVisATJ06dceOHd9+++2tt96q1dztdlut1tDS8DabzeVyVVVVAcDu3bvn\nz59vs9lycnKef/75t99+22azkdWOHTu2cOHCYKs33ngjLi6O/Ex6VxUREaEzF52ofgbW5kOJ\nRqPRaDTqrMCyLKk2155egltQpfONzvO8TlQnX+c4juM41ap7QcGXqZ29aEV1XjKWZXXeJDoh\nhmGsVqtWsdxGzQ0Gg84Ymu2lDQ0pimpbQxLVr21uNptJjtXOXtrW0GKxaIX0iw/rf+QRQqjz\n69DE7syZMy+88ML111+fkpICAGfPngUA8nPQ+fPn8/Lyli9fDgCyLPv9/smTJwNAjx49VqxY\nAboP/HnwwQdJupaamrpv377vvvtu9OjRJBQfHz9r1qzgmrGxsfX19UajkWEY1aK1AGA0GgVB\nUD0mR2rhNjQ0qH638TwvSZJq7WKO4wwGg8/n04rKsqyaB5Ait36/X5Ikne+eQCAgCALpxev1\nqg6+hb2oRgFANf0iR9EEQdCK0jQtCELTEE3TJpNJFEVBEBiG0cls6uvr29wLwzBGo5H0ohpl\nWVa1JjNFUWazWaueMzngpHW1aERERCAQ8Pl85AEMOvMiO0GrF3LkuNleVIdnNBpVizkDgNls\nVhRFJ6p1iarJZKJpmnxqdN6KPp9PUZSL0otqlGy/aYh8qLU+m81+qMmnBtM7hNDlq+MSu7y8\nvFdffXXKlCnjx48nS8jhk08++aTRcRRBENasWQMAhYWFOTk5S5YsgQsnSux2u9vtVhQlmN65\nXK6oqCiHwwEhXzMMwzgcjpqamuA2e/bsGZpBulwur9fLcRzDMFrfOuTbVDUDY1mWpAJaUb/f\nr5p8kDNBOlGtb3dFUTiOEwTB7/frJ3Zer5f0opUA6fQCAMFetLrQeuoDz/PkuReqUfKV2TRE\nDjFKkuT1evWPFHq93jb3Qp4tQXpRjVIUpRqiadpsNpO9qholCbTqgCMiImRZ9nq9+odvvV4v\nwzAmk0mrF5J3qoYoigr2ohrleV5reCaTSSflMplMWiFy7tjr9ZLetebl8/lkWdZP7PR70XpR\nSNTr9aqmbuRcqk5U6/+WYH6v/78TQgh1ch10V+zRo0dfeeWVOXPmBLM6ALjqqqsAoKSkJLiE\nXCfHcVzXrl27du1KHl5EfiYPLxowYIAoisF7LMhNGIMHD3Y4HFFRUQUFBWS5IAgVFRWxsbEd\nMzuEEEIIoc6gIxI7QRAyMzOTkpJ69+5deYHP5+vZs+e11167efPmioqKQCCwc+fOWbNmVVdX\n62zK4XDcdNNN69atKykpKSsrW7VqVb9+/a6++mqaphMTE3Nycn744YfKysr169cbjUasY4cQ\nQgihK0pHnIo9duzYuXPnsrOzs7Ozgwtnzpx59913z507d+PGjbNmzVIUpXfv3hkZGeSkKjF0\n6NDVq1c32trs2bM3bNiQkZERCASuueaaxYsXk9Oy9957b0NDw8qVKz0eT0JCwosvvqh/nwFC\nCCGEUJjpiMTuuuuu2759u2ooKipq/vz5rdqa2Wx+6qmnmi6naTo5OTk5ObktQ0QIIYQQuvzh\ns2IRQgghhMIEJnYIIYQQQmGC0q8yGq5IdTHybAat0h4Gg0GSJK2iCaRkmlY0EAio1soiT0cQ\nRVErKsuyaojUYiDl8XTK85K5tLMXrYak4oxqhRdS+EOreh95doJqjQnSMBAIkKj+1C5WL02j\nZHc1DZEnHMiyrBUlu0t1wDzPBxvqz4v0ojW8lvfSFCleoxUCAJ2oToiiKPJOa/atSJ4A0c5e\nWtXwtw91QwMIfhAEkCTw+0AUQJTA52UUJeD3gdcLkgSSCF4vSCJIEvi8lCSxd98jdeuuKEqz\nz9VACKFOq6OfPNFJkOSAPEtKq/QrwzB+v1/roWEkI9SKCoKg+iVNqqfqRAOBgOqXNMdxLMuS\n0nQ63zqyLAuCQHrRKrOn0wspBSeKolYULnxhN0KemqBVHo+UFlPdz6QosSRJPp9P57EQAODz\n+drcC8uywV5Uo1oVgElxYK0KwCQj1Hr/kJzG5/NpPZEsOK/gw+u0etF5l5LETitKqmGrhsgj\nv9rQkPzbQP410k/sFEXhWFY+e0YgVYhlGYIvnCJTfj9rMoleL8gyBLM0OUAJAgDQHEcFJKm+\nHgAovx8UGWQFBD8AUJIkKrIcCIDPB4oCskxdWK5IkkhR4POCxv+rKp+HCxQA8LgFIVr/fyeE\nEOrkrtDEjmQ25Hib1tEORVG0Dg6RfE4nKkmSVn5GGmpFtVKu4NEy/edukYM3pBedHFErRB6Q\noB/VKnqs05CmaYqiVEPkJSDD1n/WkyiKbe6F0DmypXVIjPSo1ZCmaZ1t6vcYJIoieXG1VmYY\nRlEUrUOGAKAT1QqRVjpR0P1ckKjOM2AAQJIkWZZBFKW1K7QSdglAq3Yz+YdJ6w2hhFxEohiN\nABTQtGwwAMNQRhPliJYYRmFYhePAwAHLKjwPBoPCsLzNLoAiU7TM8WAwAMsqvFFhWDCwEdEx\ntMkk1dbqPwIOIYQ6uSs0sUMIdQSWpUfe5Pf7gWaUC0dkFZoGAwfkkWJ+v2K4kPgxvy0HAHNk\nJM0b3W43Sb8AQOF5oGiFooDjbDab2+uTaZVLhCMjIzmOq6uqUn+kWGRkoKFBPXXTzVMRQuhy\ngYkdQm1BBQJUfT3Ue5jy87S3ARrqaZ+X8nrB20B7G6C+XrRGQmrapR7mpcYw9MQHfCEP9wtl\ncTgEjYLklN1OM0ygqkp9syazIoha51sRQuhK1kGJncfj2bBhw48//iiKYkJCQlpaWteuXS/u\npi5iF6jzowISiCL4/RS5KksUKYqiJJGtr6dEkRIFCEiU3w+SREkiLYoiy1KBgDF4qCakeDVt\n4MBk4oOXeRk45cKhIIqiAg4HuN18bQ3t80JDA+XzUvUeyuulRAEAZACz2vAUhlEYGg8BIYQQ\n6mAdlNhlZmZ6PJ4lS5bwPJ+dnb106dI1a9bQamdSQnk8nrNnzw4cOLAlm2pbF+jyEti/j/ly\np9Wvfl0/AJg0lssAlPYVXQCgcx3YH6I0rRhNis0mG02K2Wyw2X0MCyazbDKDyayYTEqERTGZ\nFAMXExPT7AV2l5ZXlmv/eJFoXeC3u4FqvT6XICoArj+uICgKDdQd0Q5ACCHUKXVEYldZWXnk\nyJFVq1bFx8cDQFpa2sMPP5yfn3/dddfV1NRs2rTpp59+amho6N+//4wZM/r16xdsWFJSsmnT\nptCnimltqkePHlpd6I9N+uJzY3UVAIAggvyH7zDZYOCalDuhRIGSZWAYkaZ5mvn9nliOh+AB\nGouVlWWafEVyvHLh2h2F4yiTOWAwMF4v1VD/24kkSaICEgCALFNygFUUKhAAv59EqQtRGqjA\nqJthwKAW7vOwZTKB3R6gaDAaFZpRDAbgeGAYhecZnqc53k9RwLJg4BRy4M1kAoZhTGZrTIzP\n6/W6XMEtUYJAXnGWZTmDoSHknCAlByhRBACKoiwWiwjQAJRiMilGs2L6PXWkaZqzWoWQbbbZ\nkTpPWuGJRvfieGRZUhSKoiiKCr3/2hX4/WeKOgEXbmggvLLs/5PPUZb/z0g8GIkQQp1TRyR2\nx48fNxgMJOUCAIvFEhcXV1hYeN111y1btiw2Nnbt2rU8z2/dujUjI2Pz5s06ZS+0NtXQ0KDV\nhf7Y5Lz/M1RrXMeju3dkAAaAaX1DnTsBAYDSqRmdMFi7XWPy8UKm7Ayo3bRL8Tzj93GqlTUM\nhgDHMX4/1+TqckoO0IoCALzahecMw0gcR4ti42ggQIkCwzAURRmbNvT5aJoO9BsAw29s4byY\n4Tf6Bg/1er1NQzzPUywr1terzouKsADNyKCSkNAGAxiNgUi7SoimaYcD/P5AXV0LR9g29YHA\n/3l+H3kkQ9MhQyX3t9IUWGkaAGzM7+8Rcs+sCcCgdu0/wzBNb9wmGyf3IAdvI+AoMFG/b5bj\nOFYSuT8e8LYxNAUUz/NGmlavL9d6PkXxqdUMUiSJUZRatTcwiboDAdXbIwKSxNF0rXbUGwhI\napuVAoFovGgPIXT564jEzu12W63W0OIINpvN5XIVFxcXFRUtWrTIarUCwNSpU3fs2PHtt9/e\neuutrd2UzWZTXR789eDBg4sXLw7++vLLL48YMYKiqBtuG39KaMX5shqNb5oOsLxv7wUWi8Vi\n0VnHYDCYzWaKoh4pKt7OmdSzRK8MwIFW9iwC0GbNE5P62vRuurvO94HJZDQa9ctMREdHA8Ab\nZb8uKTndpsH9WbyyrJqa9DL+curG4dHR0ao1cYLIvG6jKOW2/9GqFk4SO60Q/PGIXcc0tERH\n69c2t9lsNE3Xy7J1/zc6q3Uq/xp69V0OlfweIYQuIx10jZ1qyauzZ88CQEpKSujC8+fP5+Xl\nLV++HABkWfb7/ZMnTwaAHj16rFixQmtTOssJlmVJ+hj8VZZlmqYjeS4qdDWKsoRcOA9Nvvni\ntUONRqIaDQ5SJ6oV6sZxpPYYKXumhczLEtvN3uCFRluiKKB+OxCkOnSKogAozahOwws/BKNa\nL0cETRkoOrS0RPfIHoqiyLKsnyjIskxRlJGmowx/4pvWRFH8Hw9TNftqag27O8+1cF5w4cCb\nar1r0otqSL8hieqE9DerFSL1ArWiQWRUDEX9P6ul0R6wswx5G3a2hDXGwLbkI4YQQp1ZRyR2\ndrvd7XYrihL8sne5XFFRUeSU6yeffNLo3KsgCGvWrAGAwsLCnJycJUuWwIXvIa1NaS0PbnPk\nyJHbtm0L/upyuWpqamw223+vH1pZWak6bJvN5vF4VA+3WK1Wnudramq0oj6fT/XC+YiICJPJ\n5HK5tKJaj1UwGo0Wi6Wurs7v98fExKgOGABEUXS73REREWuHD2tDLyaTKSIigvSiGgUArdOg\nVqu1vr5eK8qybL3aSVKWZe12u9frra+vN5lMOmfha2pqeJ5/tHvsQ5GW1vZiMBhsNhvpRTVq\nNBrr1E620jTtcDj8fr9W1Gq1ujSusSM3T7hcLtK7zrwYhomKihIEQbUXhmEsFotqLxRFRUdH\nS5KkFbXb7TUapUYcDoeiKDpRrZDdbmdZtqamhvSuNS+32y3LcnR09LfXD9HppVqj3IndbmcY\npkqj3Indbne5XKopGqljV6VRxy4yMrJBo46dxWIxGo21tbWSJOl8xBBCqJPriJtGBwwYIIpi\ncXEx+dXtdpeWlg4ePPiqq64CgJKSkuCa586dAwCO47p27dq1a1fyFUJ+Jl8hWpvSWt4Bs0MI\nIYQQ6iQ0T0xcXC+//PL58+dnz57NcdymTZvcbvfrr79OUdTixYsFQZg3b57D4di1a1dWVtb6\n9esdjt+KKeTn5ze6K1ZnU1rLdUb1/vvvnzlzZuHCha2tirJt27aff/758ccft9tbd0XO3r17\nv/nmm2nTpvXq1atVDb/77rtdu3YlJSUNGTKk2ZV37959+PDh5OTkuLi4VvVy+PDh3bt3T5w4\n8eqrr25Vw4KCAqfTOXr06FGjRrWq4dmzZ999993hw4f/9a9/bXblo0ePfvbZZ2PHjh0xYkSr\neiktLf3ggw9GjRo1evToVjV0uVzr1q0bPHjwPffc06qGiqIsX748Li4uOTm52ZWrq6vffvvt\nIUOGJCUltaoXSZJeffXVXr16TZs2rVUNASAzM5PjuMcff7y1DbOysioqKhYsWNCSlVeuXBkR\nETFz5szW9rJx48ba2tp58+a1tuGWLVuKi4uffvppk0mr9I26nTt35ubmzpgxA+tfIoQuax1U\n5m327Nm9e/fOyMhYsGABx3GLFy8mKdfcuXNjYmJmzZr10EMP7du3LyMjI5jVAcDQoUMbZXU6\nm9JarmP//v1Op7PZq4WaOnLkiNPpVD2vp+/nn392Op1aJ391nDx50ul0nj7dovsG8vPznU6n\n1kkuHSdOnHA6nWfOnGltw7KyMqfTWVRU1NqG1dXVTqczPz+/JSuXlpY6nc4TJ060tpeqqiqn\n0/nTTz+1tmFDQ4PT6Txy5EhrGyqK4nQ6//Of/7RkZY/H43Q6v/vuu9b2Isuy0+ncv39/axsC\nwI4dO3bt2tWGhnv37v3ss89auPLnn3/+5ZdftqGXPXv2bN++vQ0NDx486HQ621BBMDc31+l0\n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\nLs2sEEIo3LGXegAIoc7olltuGThw4HvvvTdnzpyPP/6Ypulp06YFo4kwYRMAAAIzSURBVKmp\nqY8++mijJv379weAxMTEAwcOLFiwYNy4cXa7naKoO++8M3Q1zOoQQujPg4kdQkjd9OnT09PT\nf/755+zs7LFjx3bv3h0AevXqBQCBQODGG29s2uTEiRNfffXVo48+umzZMrJEkqTq6ur4+PiO\nHDlCCF2x8FQsQkhdSkoKwzAvvfTS4cOHU1JSyEKHwzFy5MjPPvustrY2uOb777+/ePFiSZJI\nMZS4uLhg6K233vL5fIFAoIMHjxBCVya8KxYhpGn8+PE7duyIjIw8d+6cyWQiC0kRu8GDB8+d\nO7dbt2779+9/5ZVXpk6d+s4774ii2K9fP1mW33zzzejo6E8//fT7778HgO+//37btm0jR46c\nMGHCiRMnfvnll0s5K4QQCl94xA4hpCk1NRUAHnjggWBWBwB/+ctf9u7dGxsb++STT44fP37r\n1q3Lli3buHEjABgMBqfT2atXrylTptx3330ej2fbtm1z587lef6+++4rKyu7ZDNBCKErAx6x\nQwhp+vzzz5OSkr799tuRI0de6rEghBBqHiZ2CCF1oijefPPNLMseOnToUo8FIYRQi+BdsQih\nxkpLS3Nzc996663c3FzM6hBC6DKC19ghhBr78ssvJ06cWFhYuH379hEjRlzq4SCEEGopPBWL\nEEIIIRQm8IgdQgghhFCYwMQOIYQQQihMYGKHEEIIIRQmMLFDCCGEEAoTmNghhBBCCIUJTOwQ\nQgghhMIEJnYIIYQQQmHi/wN5CU7RWDjdJgAAAABJRU5ErkJggg=="
          },
          "metadata": {
            "image/png": {
              "width": 420,
              "height": 420
            }
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "####데이터 정렬과 검색"
      ],
      "metadata": {
        "id": "c_jvTWgk4AUP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "tb = arrange(x_avg, desc(V_avg))\n",
        "print(tb)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2UJIZlHr4CV3",
        "outputId": "ab3d1bea-b195-47d7-b4c6-526b849dbaf4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[90m# A tibble: 432 × 5\u001b[39m\n",
            "\u001b[90m# Groups:   region, year [216]\u001b[39m\n",
            "   region        year type             V_avg P_avg\n",
            "   \u001b[3m\u001b[90m<chr>\u001b[39m\u001b[23m        \u001b[3m\u001b[90m<int>\u001b[39m\u001b[23m \u001b[3m\u001b[90m<chr>\u001b[39m\u001b[23m            \u001b[3m\u001b[90m<dbl>\u001b[39m\u001b[23m \u001b[3m\u001b[90m<dbl>\u001b[39m\u001b[23m\n",
            "\u001b[90m 1\u001b[39m TotalUS       \u001b[4m2\u001b[24m018 conventional 42\u001b[4m1\u001b[24m\u001b[4m2\u001b[24m\u001b[4m5\u001b[24m533. 1.06 \n",
            "\u001b[90m 2\u001b[39m TotalUS       \u001b[4m2\u001b[24m016 conventional 34\u001b[4m0\u001b[24m\u001b[4m4\u001b[24m\u001b[4m3\u001b[24m450. 1.05 \n",
            "\u001b[90m 3\u001b[39m TotalUS       \u001b[4m2\u001b[24m017 conventional 33\u001b[4m9\u001b[24m\u001b[4m9\u001b[24m\u001b[4m5\u001b[24m658. 1.22 \n",
            "\u001b[90m 4\u001b[39m TotalUS       \u001b[4m2\u001b[24m015 conventional 31\u001b[4m2\u001b[24m\u001b[4m2\u001b[24m\u001b[4m4\u001b[24m729. 1.01 \n",
            "\u001b[90m 5\u001b[39m SouthCentral  \u001b[4m2\u001b[24m018 conventional  7\u001b[4m4\u001b[24m\u001b[4m6\u001b[24m\u001b[4m5\u001b[24m557. 0.806\n",
            "\u001b[90m 6\u001b[39m West          \u001b[4m2\u001b[24m018 conventional  7\u001b[4m4\u001b[24m\u001b[4m5\u001b[24m\u001b[4m1\u001b[24m445. 0.981\n",
            "\u001b[90m 7\u001b[39m California    \u001b[4m2\u001b[24m018 conventional  6\u001b[4m7\u001b[24m\u001b[4m8\u001b[24m\u001b[4m6\u001b[24m962. 1.08 \n",
            "\u001b[90m 8\u001b[39m West          \u001b[4m2\u001b[24m016 conventional  6\u001b[4m4\u001b[24m\u001b[4m0\u001b[24m\u001b[4m4\u001b[24m892. 0.916\n",
            "\u001b[90m 9\u001b[39m West          \u001b[4m2\u001b[24m017 conventional  6\u001b[4m2\u001b[24m\u001b[4m7\u001b[24m\u001b[4m9\u001b[24m482. 1.10 \n",
            "\u001b[90m10\u001b[39m California    \u001b[4m2\u001b[24m016 conventional  6\u001b[4m1\u001b[24m\u001b[4m0\u001b[24m\u001b[4m5\u001b[24m539. 1.05 \n",
            "\u001b[90m# ℹ 422 more rows\u001b[39m\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_avg1 = x_avg %>% filter(region != \"TotalUS\")\n",
        "\n",
        "# TotalUS를 제외하고 나면 통계 함수를 직접 사용하여 처리할 수 있음.\n",
        "print(x_avg1[x_avg1$V_avg == max(x_avg1$V_avg), ])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cawxLxnf4EYZ",
        "outputId": "5a389d8f-6996-4ef3-de15-9d03218d420e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[90m# A tibble: 1 × 5\u001b[39m\n",
            "\u001b[90m# Groups:   region, year [1]\u001b[39m\n",
            "  region        year type            V_avg P_avg\n",
            "  \u001b[3m\u001b[90m<chr>\u001b[39m\u001b[23m        \u001b[3m\u001b[90m<int>\u001b[39m\u001b[23m \u001b[3m\u001b[90m<chr>\u001b[39m\u001b[23m           \u001b[3m\u001b[90m<dbl>\u001b[39m\u001b[23m \u001b[3m\u001b[90m<dbl>\u001b[39m\u001b[23m\n",
            "\u001b[90m1\u001b[39m SouthCentral  \u001b[4m2\u001b[24m018 conventional 7\u001b[4m4\u001b[24m\u001b[4m6\u001b[24m\u001b[4m5\u001b[24m557. 0.806\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "####Date형 데이터의 활용"
      ],
      "metadata": {
        "id": "LRll5ctx5NEI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "library(lubridate)"
      ],
      "metadata": {
        "id": "1cOc2rhD5eiJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_avg =\n",
        "avocado %>%\n",
        "group_by(region, year, month(Date), type) %>%\n",
        "summarize(V_avg = mean(Total.Volume), P_avg = mean(AveragePrice))\n",
        "\n",
        "print(x_avg)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nTZ1uyy95jQ7",
        "outputId": "465f4fc5-eca2-4524-e2f6-a240fdb9f059"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\u001b[1m\u001b[22m`summarise()` has grouped output by 'region', 'year', 'month(Date)'. You can\n",
            "override using the `.groups` argument.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[90m# A tibble: 4,212 × 6\u001b[39m\n",
            "\u001b[90m# Groups:   region, year, month(Date) [2,106]\u001b[39m\n",
            "   region  year `month(Date)` type          V_avg P_avg\n",
            "   \u001b[3m\u001b[90m<chr>\u001b[39m\u001b[23m  \u001b[3m\u001b[90m<int>\u001b[39m\u001b[23m         \u001b[3m\u001b[90m<dbl>\u001b[39m\u001b[23m \u001b[3m\u001b[90m<chr>\u001b[39m\u001b[23m         \u001b[3m\u001b[90m<dbl>\u001b[39m\u001b[23m \u001b[3m\u001b[90m<dbl>\u001b[39m\u001b[23m\n",
            "\u001b[90m 1\u001b[39m Albany  \u001b[4m2\u001b[24m015             1 conventional \u001b[4m4\u001b[24m\u001b[4m2\u001b[24m932.  1.17\n",
            "\u001b[90m 2\u001b[39m Albany  \u001b[4m2\u001b[24m015             1 organic       \u001b[4m1\u001b[24m198.  1.84\n",
            "\u001b[90m 3\u001b[39m Albany  \u001b[4m2\u001b[24m015             2 conventional \u001b[4m5\u001b[24m\u001b[4m2\u001b[24m343.  1.03\n",
            "\u001b[90m 4\u001b[39m Albany  \u001b[4m2\u001b[24m015             2 organic       \u001b[4m1\u001b[24m334.  1.76\n",
            "\u001b[90m 5\u001b[39m Albany  \u001b[4m2\u001b[24m015             3 conventional \u001b[4m5\u001b[24m\u001b[4m0\u001b[24m659.  1.06\n",
            "\u001b[90m 6\u001b[39m Albany  \u001b[4m2\u001b[24m015             3 organic       \u001b[4m1\u001b[24m444.  1.83\n",
            "\u001b[90m 7\u001b[39m Albany  \u001b[4m2\u001b[24m015             4 conventional \u001b[4m4\u001b[24m\u001b[4m8\u001b[24m594.  1.17\n",
            "\u001b[90m 8\u001b[39m Albany  \u001b[4m2\u001b[24m015             4 organic       \u001b[4m1\u001b[24m402.  1.89\n",
            "\u001b[90m 9\u001b[39m Albany  \u001b[4m2\u001b[24m015             5 conventional \u001b[4m9\u001b[24m\u001b[4m7\u001b[24m216.  1.26\n",
            "\u001b[90m10\u001b[39m Albany  \u001b[4m2\u001b[24m015             5 organic       \u001b[4m1\u001b[24m836.  1.94\n",
            "\u001b[90m# ℹ 4,202 more rows\u001b[39m\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###모델링을 위한 가공"
      ],
      "metadata": {
        "id": "aCcGQCXA8kz6"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "####데이터 프레임의 열 이름 읽고 쓰기"
      ],
      "metadata": {
        "id": "2HiSMRSM959Y"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 파일 다운로드를 위한 패키지 설치 및 로드\n",
        "if (!requireNamespace(\"httr\", quietly = TRUE)) {\n",
        "  install.packages(\"httr\")\n",
        "}\n",
        "library(httr)\n",
        "\n",
        "# UCI Wine 데이터셋의 URL 지정\n",
        "wine_url <- 'https://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data'\n",
        "\n",
        "# 파일을 다운로드하여 원본 코드에서 참조하는 'wine.data.txt'로 저장\n",
        "# 원본 파일명은 wine.data이지만, 텍스트 파일로 저장하는 것이 이후 코드와 일치합니다.\n",
        "GET(wine_url, write_disk(\"wine.data.txt\", overwrite = TRUE))\n",
        "\n",
        "# (참고) wine.name.txt 파일도 필요하므로 함께 다운로드합니다.\n",
        "name_url <- 'https://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.names'\n",
        "GET(name_url, write_disk(\"wine.name.txt\", overwrite = TRUE))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 240
        },
        "id": "4qHmQfMjxO7e",
        "outputId": "6f022af2-2883-413c-9836-29b242512269"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Response [https://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data]\n",
              "  Date: 2025-10-02 02:34\n",
              "  Status: 200\n",
              "  Content-Type: <unknown>\n",
              "  Size: 10.8 kB\n",
              "<ON DISK>  wine.data.txtNULL"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Response [https://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.names]\n",
              "  Date: 2025-10-02 02:34\n",
              "  Status: 200\n",
              "  Content-Type: <unknown>\n",
              "  Size: 3.04 kB\n",
              "<ON DISK>  wine.name.txtNULL"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "wine = read.table(\"wine.data.txt\", header = TRUE, sep = \",\")\n",
        "\n",
        "print(head(wine))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kCwH8pCN8mVx",
        "outputId": "8dbcef1e-e150-4124-d405-fb1969ef7e55"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  X1 X14.23 X1.71 X2.43 X15.6 X127 X2.8 X3.06 X.28 X2.29 X5.64 X1.04 X3.92\n",
            "1  1  13.20  1.78  2.14  11.2  100 2.65  2.76 0.26  1.28  4.38  1.05  3.40\n",
            "2  1  13.16  2.36  2.67  18.6  101 2.80  3.24 0.30  2.81  5.68  1.03  3.17\n",
            "3  1  14.37  1.95  2.50  16.8  113 3.85  3.49 0.24  2.18  7.80  0.86  3.45\n",
            "4  1  13.24  2.59  2.87  21.0  118 2.80  2.69 0.39  1.82  4.32  1.04  2.93\n",
            "5  1  14.20  1.76  2.45  15.2  112 3.27  3.39 0.34  1.97  6.75  1.05  2.85\n",
            "6  1  14.39  1.87  2.45  14.6   96 2.50  2.52 0.30  1.98  5.25  1.02  3.58\n",
            "  X1065\n",
            "1  1050\n",
            "2  1185\n",
            "3  1480\n",
            "4   735\n",
            "5  1450\n",
            "6  1290\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "n = readLines(\"wine.name.txt\")\n",
        "print(n)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_PxQDbG49qpN",
        "outputId": "5c4fd00b-0428-4e1e-ff9d-b9539b7d3115"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  [1] \"1. Title of Database: Wine recognition data\"                                    \n",
            "  [2] \"\\tUpdated Sept 21, 1998 by C.Blake : Added attribute information\"               \n",
            "  [3] \"\"                                                                               \n",
            "  [4] \"2. Sources:\"                                                                    \n",
            "  [5] \"   (a) Forina, M. et al, PARVUS - An Extendible Package for Data\"               \n",
            "  [6] \"       Exploration, Classification and Correlation. Institute of Pharmaceutical\"\n",
            "  [7] \"       and Food Analysis and Technologies, Via Brigata Salerno, \"               \n",
            "  [8] \"       16147 Genoa, Italy.\"                                                     \n",
            "  [9] \"\"                                                                               \n",
            " [10] \"   (b) Stefan Aeberhard, email: stefan@coral.cs.jcu.edu.au\"                     \n",
            " [11] \"   (c) July 1991\"                                                               \n",
            " [12] \"3. Past Usage:\"                                                                 \n",
            " [13] \"\"                                                                               \n",
            " [14] \"   (1)\"                                                                         \n",
            " [15] \"   S. Aeberhard, D. Coomans and O. de Vel,\"                                     \n",
            " [16] \"   Comparison of Classifiers in High Dimensional Settings,\"                     \n",
            " [17] \"   Tech. Rep. no. 92-02, (1992), Dept. of Computer Science and Dept. of\"        \n",
            " [18] \"   Mathematics and Statistics, James Cook University of North Queensland.\"      \n",
            " [19] \"   (Also submitted to Technometrics).\"                                          \n",
            " [20] \"\"                                                                               \n",
            " [21] \"   The data was used with many others for comparing various \"                   \n",
            " [22] \"   classifiers. The classes are separable, though only RDA \"                    \n",
            " [23] \"   has achieved 100% correct classification.\"                                   \n",
            " [24] \"   (RDA : 100%, QDA 99.4%, LDA 98.9%, 1NN 96.1% (z-transformed data))\"          \n",
            " [25] \"   (All results using the leave-one-out technique)\"                             \n",
            " [26] \"\"                                                                               \n",
            " [27] \"   In a classification context, this is a well posed problem \"                  \n",
            " [28] \"   with \\\"well behaved\\\" class structures. A good data set \"                    \n",
            " [29] \"   for first testing of a new classifier, but not very \"                        \n",
            " [30] \"   challenging.\"                                                                \n",
            " [31] \"\"                                                                               \n",
            " [32] \"   (2) \"                                                                        \n",
            " [33] \"   S. Aeberhard, D. Coomans and O. de Vel,\"                                     \n",
            " [34] \"   \\\"THE CLASSIFICATION PERFORMANCE OF RDA\\\"\"                                   \n",
            " [35] \"   Tech. Rep. no. 92-01, (1992), Dept. of Computer Science and Dept. of\"        \n",
            " [36] \"   Mathematics and Statistics, James Cook University of North Queensland.\"      \n",
            " [37] \"   (Also submitted to Journal of Chemometrics).\"                                \n",
            " [38] \"\"                                                                               \n",
            " [39] \"   Here, the data was used to illustrate the superior performance of\"           \n",
            " [40] \"   the use of a new appreciation function with RDA. \"                           \n",
            " [41] \"\"                                                                               \n",
            " [42] \"4. Relevant Information:\"                                                       \n",
            " [43] \"\"                                                                               \n",
            " [44] \"   -- These data are the results of a chemical analysis of\"                     \n",
            " [45] \"      wines grown in the same region in Italy but derived from three\"           \n",
            " [46] \"      different cultivars.\"                                                     \n",
            " [47] \"      The analysis determined the quantities of 13 constituents\"                \n",
            " [48] \"      found in each of the three types of wines. \"                              \n",
            " [49] \"\"                                                                               \n",
            " [50] \"   -- I think that the initial data set had around 30 variables, but \"          \n",
            " [51] \"      for some reason I only have the 13 dimensional version. \"                 \n",
            " [52] \"      I had a list of what the 30 or so variables were, but a.) \"               \n",
            " [53] \"      I lost it, and b.), I would not know which 13 variables\"                  \n",
            " [54] \"      are included in the set.\"                                                 \n",
            " [55] \"\"                                                                               \n",
            " [56] \"   -- The attributes are (dontated by Riccardo Leardi, \"                        \n",
            " [57] \"\\triclea@anchem.unige.it )\"                                                     \n",
            " [58] \" \\t1) Alcohol\"                                                                  \n",
            " [59] \" \\t2) Malic acid\"                                                               \n",
            " [60] \" \\t3) Ash\"                                                                      \n",
            " [61] \"\\t4) Alcalinity of ash  \"                                                       \n",
            " [62] \" \\t5) Magnesium\"                                                                \n",
            " [63] \"\\t6) Total phenols\"                                                             \n",
            " [64] \" \\t7) Flavanoids\"                                                               \n",
            " [65] \" \\t8) Nonflavanoid phenols\"                                                     \n",
            " [66] \" \\t9) Proanthocyanins\"                                                          \n",
            " [67] \"\\t10)Color intensity\"                                                           \n",
            " [68] \" \\t11)Hue\"                                                                      \n",
            " [69] \" \\t12)OD280/OD315 of diluted wines\"                                             \n",
            " [70] \" \\t13)Proline            \"                                                      \n",
            " [71] \"\"                                                                               \n",
            " [72] \"5. Number of Instances\"                                                         \n",
            " [73] \"\"                                                                               \n",
            " [74] \"      \\tclass 1 59\"                                                             \n",
            " [75] \"\\tclass 2 71\"                                                                   \n",
            " [76] \"\\tclass 3 48\"                                                                   \n",
            " [77] \"\"                                                                               \n",
            " [78] \"6. Number of Attributes \"                                                       \n",
            " [79] \"\\t\"                                                                             \n",
            " [80] \"\\t13\"                                                                           \n",
            " [81] \"\"                                                                               \n",
            " [82] \"7. For Each Attribute:\"                                                         \n",
            " [83] \"\"                                                                               \n",
            " [84] \"\\tAll attributes are continuous\"                                                \n",
            " [85] \"\\t\"                                                                             \n",
            " [86] \"\\tNo statistics available, but suggest to standardise\"                          \n",
            " [87] \"\\tvariables for certain uses (e.g. for us with classifiers\"                     \n",
            " [88] \"\\twhich are NOT scale invariant)\"                                               \n",
            " [89] \"\"                                                                               \n",
            " [90] \"\\tNOTE: 1st attribute is class identifier (1-3)\"                                \n",
            " [91] \"\"                                                                               \n",
            " [92] \"8. Missing Attribute Values:\"                                                   \n",
            " [93] \"\"                                                                               \n",
            " [94] \"\\tNone\"                                                                         \n",
            " [95] \"\"                                                                               \n",
            " [96] \"9. Class Distribution: number of instances per class\"                           \n",
            " [97] \"\"                                                                               \n",
            " [98] \"      \\tclass 1 59\"                                                             \n",
            " [99] \"\\tclass 2 71\"                                                                   \n",
            "[100] \"\\tclass 3 48\"                                                                   \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "names(wine)[2:14] <- substr(n, 4, nchar(n))\n",
        "print(names(wine))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SeODfxZU9xuO",
        "outputId": "ccdcc331-0f64-4d75-980b-16ba3b0f2d11"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Warning message in names(wine)[2:14] <- substr(n, 4, nchar(n)):\n",
            "“number of items to replace is not a multiple of replacement length”\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " [1] \"X1\"                                                                          \n",
            " [2] \"Title of Database: Wine recognition data\"                                    \n",
            " [3] \"dated Sept 21, 1998 by C.Blake : Added attribute information\"                \n",
            " [4] \"\"                                                                            \n",
            " [5] \"Sources:\"                                                                    \n",
            " [6] \"(a) Forina, M. et al, PARVUS - An Extendible Package for Data\"               \n",
            " [7] \"    Exploration, Classification and Correlation. Institute of Pharmaceutical\"\n",
            " [8] \"    and Food Analysis and Technologies, Via Brigata Salerno, \"               \n",
            " [9] \"    16147 Genoa, Italy.\"                                                     \n",
            "[10] \"\"                                                                            \n",
            "[11] \"(b) Stefan Aeberhard, email: stefan@coral.cs.jcu.edu.au\"                     \n",
            "[12] \"(c) July 1991\"                                                               \n",
            "[13] \"Past Usage:\"                                                                 \n",
            "[14] \"\"                                                                            \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "####데이터 셋 분할하기"
      ],
      "metadata": {
        "id": "DUadT6S--Ads"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 이전에 실행한 원본 코드:\n",
        "# names(wine)[2:14] <- substr(n, 4, nchar(n))\n",
        "# 이 코드 실행 후, 이 셀을 실행합니다.\n",
        "\n",
        "# 1. 첫 번째 컬럼(Class) 이름 지정\n",
        "# (일반적으로 이 컬럼은 이름이 없거나 V1이므로 dplyr에서 문제를 일으킬 수 있어 이름을 지정합니다)\n",
        "names(wine)[1] <- \"Class_Label\"\n",
        "\n",
        "# 2. 비어있는 이름(\"\" 또는 NA)을 찾아서 \"Feature_숫자\" 형태로 강제 할당합니다.\n",
        "# 이 코드는 에러 메시지에서 언급된 4, 10, 14번째를 포함하여 모든 잘못된 이름을 수정합니다.\n",
        "current_names <- names(wine)\n",
        "\n",
        "for (i in 1:length(current_names)) {\n",
        "  # 이름이 빈 문자열이거나 결측값(NA)인 경우\n",
        "  if (current_names[i] == \"\" || is.na(current_names[i])) {\n",
        "    current_names[i] <- paste0(\"Feature_\", i)\n",
        "  }\n",
        "}\n",
        "\n",
        "names(wine) <- current_names\n",
        "\n",
        "# 3. R 문법에 맞지 않는 이름(예: 공백이나 특수문자 포함)을 최종적으로 유효하게 변경\n",
        "# (dplyr이 안정적으로 작동하도록 보장)\n",
        "names(wine) <- make.names(names(wine), unique = TRUE)\n",
        "\n",
        "# 이제 다음 원본 코드인 'train_set = sample_frac(wine, 0.6)'를 실행하면 에러 없이 정상 작동합니다."
      ],
      "metadata": {
        "id": "tsY9PgCXxu_B"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 새로운 셀에 추가할 코드:\n",
        "# wine 데이터셋의 첫 번째 컬럼(클래스)에 명시적인 이름을 부여\n",
        "# 이 코드는 컬럼 이름을 지정하는 원본 코드 (names(wine)[2:14] <- ...) 이전에 실행되어야 합니다.\n",
        "\n",
        "# ----------------------------------------------------\n",
        "# 원본 코드: wine = read.table(\"wine.data.txt\", header = TRUE, sep = \",\")\n",
        "# ----------------------------------------------------\n",
        "\n",
        "# (1) 첫 번째 컬럼의 이름을 강제로 지정\n",
        "names(wine)[1] <- \"Class\"\n",
        "\n",
        "# (2) 혹시 모를 다른 빈 이름을 정리 (dplyr의 rename_with 사용)\n",
        "library(dplyr)\n",
        "wine <- wine %>% rename_with(~ if_else(.x == \"\", \"Unnamed_Col\", .x))\n",
        "\n",
        "# ----------------------------------------------------\n",
        "# 원본 코드: n = readLines(\"wine.name.txt\") 실행\n",
        "# 원본 코드: names(wine)[2:14] <- substr(n, 4, nchar(n)) 실행\n",
        "# ----------------------------------------------------"
      ],
      "metadata": {
        "id": "eyAMWYGIxf3U"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_set = sample_frac(wine, 0.6)\n",
        "str(train_set)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jWleLRz2-CNg",
        "outputId": "601b715e-a833-42cc-d2d2-70f4d2edaa47"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "'data.frame':\t106 obs. of  14 variables:\n",
            " $ Class                                                                        : int  3 2 2 2 3 2 3 3 1 1 ...\n",
            " $ Title.of.Database..Wine.recognition.data                                     : num  12.4 11.8 12 11.4 13.9 ...\n",
            " $ dated.Sept.21..1998.by.C.Blake...Added.attribute.information                 : num  3.83 1.72 4.3 2.4 5.04 1.51 2.56 1.35 3.84 1.64 ...\n",
            " $ Feature_4                                                                    : num  2.38 1.88 2.38 2.42 2.23 2.67 2.35 2.32 2.12 2.17 ...\n",
            " $ Sources.                                                                     : num  21 19.5 22 20 20 25 20 18 18.8 14 ...\n",
            " $ X.a..Forina..M..et.al..PARVUS...An.Extendible.Package.for.Data               : int  88 86 80 96 80 86 89 122 90 97 ...\n",
            " $ X....Exploration..Classification.and.Correlation..Institute.of.Pharmaceutical: num  2.3 2.5 2.1 2.9 0.98 2.95 1.4 1.51 2.45 2.8 ...\n",
            " $ X....and.Food.Analysis.and.Technologies..Via.Brigata.Salerno..               : num  0.92 1.64 1.75 2.79 0.34 2.86 0.5 1.25 2.68 2.98 ...\n",
            " $ X....16147.Genoa..Italy.                                                     : num  0.5 0.37 0.42 0.32 0.4 0.21 0.37 0.21 0.27 0.29 ...\n",
            " $ Feature_10                                                                   : num  1.04 1.42 1.35 1.83 0.68 1.87 0.64 0.94 1.48 1.98 ...\n",
            " $ X.b..Stefan.Aeberhard..email..stefan.coral.cs.jcu.edu.au                     : num  7.65 2.06 2.6 3.25 4.9 3.38 5.6 4.1 4.28 5.2 ...\n",
            " $ X.c..July.1991                                                               : num  0.56 0.94 0.79 0.8 0.58 1.36 0.7 0.76 0.91 1.08 ...\n",
            " $ Past.Usage.                                                                  : num  1.58 2.44 2.57 3.39 1.33 3.16 2.47 1.29 3 2.85 ...\n",
            " $ Feature_14                                                                   : int  520 415 580 625 415 410 780 630 1035 1045 ...\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test_set = setdiff(wine, train_set)\n",
        "str(test_set)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XKfFOh3Y-G9z",
        "outputId": "7bbabc20-91a8-4c66-9948-32e1a0de9d9d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "'data.frame':\t71 obs. of  14 variables:\n",
            " $ Class                                                                        : int  1 1 1 1 1 1 1 1 1 1 ...\n",
            " $ Title.of.Database..Wine.recognition.data                                     : num  13.2 14.4 14.2 13.9 14.1 ...\n",
            " $ dated.Sept.21..1998.by.C.Blake...Added.attribute.information                 : num  1.78 1.95 1.76 1.35 1.48 1.81 1.92 1.59 1.63 1.9 ...\n",
            " $ Feature_4                                                                    : num  2.14 2.5 2.45 2.27 2.32 2.7 2.72 2.48 2.28 2.8 ...\n",
            " $ Sources.                                                                     : num  11.2 16.8 15.2 16 16.8 17.2 20 16.5 16 19.4 ...\n",
            " $ X.a..Forina..M..et.al..PARVUS...An.Extendible.Package.for.Data               : int  100 113 112 98 95 112 120 108 126 107 ...\n",
            " $ X....Exploration..Classification.and.Correlation..Institute.of.Pharmaceutical: num  2.65 3.85 3.27 2.98 2.2 2.85 2.8 3.3 3 2.95 ...\n",
            " $ X....and.Food.Analysis.and.Technologies..Via.Brigata.Salerno..               : num  2.76 3.49 3.39 3.15 2.43 2.91 3.14 3.93 3.17 2.97 ...\n",
            " $ X....16147.Genoa..Italy.                                                     : num  0.26 0.24 0.34 0.22 0.26 0.3 0.33 0.32 0.24 0.37 ...\n",
            " $ Feature_10                                                                   : num  1.28 2.18 1.97 1.85 1.57 1.46 1.97 1.86 2.1 1.76 ...\n",
            " $ X.b..Stefan.Aeberhard..email..stefan.coral.cs.jcu.edu.au                     : num  4.38 7.8 6.75 7.22 5 7.3 6.2 8.7 5.65 4.5 ...\n",
            " $ X.c..July.1991                                                               : num  1.05 0.86 1.05 1.01 1.17 1.28 1.07 1.23 1.09 1.25 ...\n",
            " $ Past.Usage.                                                                  : num  3.4 3.45 2.85 3.55 2.82 2.88 2.65 2.82 3.71 3.4 ...\n",
            " $ Feature_14                                                                   : int  1050 1480 1450 1045 1280 1310 1280 1680 780 915 ...\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###데이터 구조 변경"
      ],
      "metadata": {
        "id": "o-n5XTL5APsr"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "####변수 이름 변경"
      ],
      "metadata": {
        "id": "hK2-HxBYBgra"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 파일 다운로드를 위한 패키지 설치 및 로드\n",
        "if (!requireNamespace(\"httr\", quietly = TRUE)) {\n",
        "  install.packages(\"httr\")\n",
        "}\n",
        "library(httr)\n",
        "\n",
        "# 1. electricity_generation_per_person.csv 파일 다운로드\n",
        "# (일반적으로 사용되는 데이터 소스 URL을 사용하여 다운로드)\n",
        "gen_url <- 'https://raw.githubusercontent.com/datasets/electricity-generation/master/data/electricity-generation-per-person.csv'\n",
        "GET(gen_url, write_disk(\"electricity_generation_per_person.csv\", overwrite = TRUE))\n",
        "\n",
        "# 2. 다음 단계에서 필요한 electricity_use_per_person.csv 파일도 미리 다운로드합니다.\n",
        "use_url <- 'https://raw.githubusercontent.com/datasets/electricity-consumption/master/data/electricity-use-per-person.csv'\n",
        "GET(use_url, write_disk(\"electricity_use_per_person.csv\", overwrite = TRUE))\n",
        "\n",
        "# 이제 원본 코드를 실행하면 됩니다."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 240
        },
        "id": "yjEiNjlex5-n",
        "outputId": "b944373f-bc29-4ef9-bb87-928bbacfb614"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Response [https://raw.githubusercontent.com/datasets/electricity-generation/master/data/electricity-generation-per-person.csv]\n",
              "  Date: 2025-10-02 02:36\n",
              "  Status: 404\n",
              "  Content-Type: text/plain; charset=utf-8\n",
              "  Size: 14 B\n",
              "<ON DISK>  electricity_generation_per_person.csvNULL"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Response [https://raw.githubusercontent.com/datasets/electricity-consumption/master/data/electricity-use-per-person.csv]\n",
              "  Date: 2025-10-02 02:36\n",
              "  Status: 404\n",
              "  Content-Type: text/plain; charset=utf-8\n",
              "  Size: 14 B\n",
              "<ON DISK>  electricity_use_per_person.csvNULL"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "elec_gen = read.csv(\"electricity_generation_per_person.csv\", header = TRUE, sep = \",\")\n",
        "print(names(elec_gen))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z_ml6QBNAQrL",
        "outputId": "3cdfeb67-1115-4617-fc4c-553abf188dd5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Warning message in read.table(file = file, header = header, sep = sep, quote = quote, :\n",
            "“incomplete final line found by readTableHeader on 'electricity_generation_per_person.csv'”\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1] \"X404..Not.Found\"\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "str(elec_gen)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "V0eVBbZG10CL",
        "outputId": "d421f902-aefe-4459-8925-7dbc0f2fc867"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "'data.frame':\t0 obs. of  1 variable:\n",
            " $ X404..Not.Found: logi \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ncol(elec_gen)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "id": "pVwx9-r114_0",
        "outputId": "8d57a5d5-24e8-4642-b851-0ff28e3e61a5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "1"
            ],
            "text/markdown": "1",
            "text/latex": "1",
            "text/plain": [
              "[1] 1"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "head(names(elec_gen))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "id": "dB8FAuwU19Xv",
        "outputId": "4c9d5415-0f1e-4a94-8647-138cf9248c02"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "'X404..Not.Found'"
            ],
            "text/markdown": "'X404..Not.Found'",
            "text/latex": "'X404..Not.Found'",
            "text/plain": [
              "[1] \"X404..Not.Found\""
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "names(elec_gen)[2:33] = substr(names(elec_gen), 2, nchar(names(elec_gen)))[2:33]\n",
        "print(names(elec_gen))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D2OQE9DXArkd",
        "outputId": "4449452a-d3d3-492c-b036-ed47dac223bf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " [1] \"country\" \"1985\"    \"1986\"    \"1987\"    \"1988\"    \"1989\"    \"1990\"   \n",
            " [8] \"1991\"    \"1992\"    \"1993\"    \"1994\"    \"1995\"    \"1996\"    \"1997\"   \n",
            "[15] \"1998\"    \"1999\"    \"2000\"    \"2001\"    \"2002\"    \"2003\"    \"2004\"   \n",
            "[22] \"2005\"    \"2006\"    \"2007\"    \"2008\"    \"2009\"    \"2010\"    \"2011\"   \n",
            "[29] \"2012\"    \"2013\"    \"2014\"    \"2015\"    \"2016\"   \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 새로운 셀에 이 코드를 입력하고 실행\n",
        "names(elec_gen)[2:33] <- substr(names(elec_gen)[2:33], 2, nchar(names(elec_gen)[2:33]))"
      ],
      "metadata": {
        "id": "rI4em3Gg0u98"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "elec_use = read.csv(\"electricity_use_per_person.csv\", header = TRUE, sep = \",\")\n",
        "print(head(elec_use))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ux60SgdcBBBD",
        "outputId": "1543a27d-ca6a-4e62-9097-eb477343e418"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Warning message in read.table(file = file, header = header, sep = sep, quote = quote, :\n",
            "“incomplete final line found by readTableHeader on 'electricity_use_per_person.csv'”\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1] X404..Not.Found\n",
            "<0 rows> (or 0-length row.names)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "elec_use #View(elec_use)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 98
        },
        "id": "42U7ecxiebUr",
        "outputId": "4a3d3091-a5eb-4c74-80bb-e425a14a3e28"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<table class=\"dataframe\">\n",
              "<caption>A data.frame: 0 × 1</caption>\n",
              "<thead>\n",
              "\t<tr><th scope=col>X404..Not.Found</th></tr>\n",
              "\t<tr><th scope=col>&lt;lgl&gt;</th></tr>\n",
              "</thead>\n",
              "<tbody>\n",
              "</tbody>\n",
              "</table>\n"
            ],
            "text/markdown": "\nA data.frame: 0 × 1\n\n| X404..Not.Found &lt;lgl&gt; |\n|---|\n\n",
            "text/latex": "A data.frame: 0 × 1\n\\begin{tabular}{l}\n X404..Not.Found\\\\\n <lgl>\\\\\n\\hline\n\\end{tabular}\n",
            "text/plain": [
              "     X404..Not.Found"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "elec_use <- read.csv(\"electricity_use_per_person.csv\", header = TRUE, sep = \",\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gU_t6T4-4CEw",
        "outputId": "d5b307d6-6e17-4179-e32e-d6fdc97bf688"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Warning message in read.table(file = file, header = header, sep = sep, quote = quote, :\n",
            "“incomplete final line found by readTableHeader on 'electricity_use_per_person.csv'”\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 데이터의 마지막 6줄을 확인\n",
        "tail(elec_use)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 98
        },
        "id": "Qsi5SXNu4h7W",
        "outputId": "44f364f7-daed-45fd-9747-84e8926036c4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<table class=\"dataframe\">\n",
              "<caption>A data.frame: 0 × 1</caption>\n",
              "<thead>\n",
              "\t<tr><th scope=col>X404..Not.Found</th></tr>\n",
              "\t<tr><th scope=col>&lt;lgl&gt;</th></tr>\n",
              "</thead>\n",
              "<tbody>\n",
              "</tbody>\n",
              "</table>\n"
            ],
            "text/markdown": "\nA data.frame: 0 × 1\n\n| X404..Not.Found &lt;lgl&gt; |\n|---|\n\n",
            "text/latex": "A data.frame: 0 × 1\n\\begin{tabular}{l}\n X404..Not.Found\\\\\n <lgl>\\\\\n\\hline\n\\end{tabular}\n",
            "text/plain": [
              "     X404..Not.Found"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "2rtMRWXf4jqE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "names(elec_use)[2:56] <- substr(names(elec_use)[2:56], 2, nchar(names(elec_use)[2:56]))\n",
        "print(head(elec_use))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "id": "ufyF0FFs4Dxo",
        "outputId": "172558ad-552a-48ac-8a71-5984660d260e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ERROR",
          "evalue": "Error in names(elec_use)[2:56] <- substr(names(elec_use)[2:56], 2, nchar(names(elec_use)[2:56])): 'names' attribute [56] must be the same length as the vector [1]\n",
          "traceback": [
            "Error in names(elec_use)[2:56] <- substr(names(elec_use)[2:56], 2, nchar(names(elec_use)[2:56])): 'names' attribute [56] must be the same length as the vector [1]\nTraceback:\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "names(elec_use)[2:56] = substr(names(elec_use)[2:56], 2, nchar(names(elec_use)[2:56]))\n",
        "print(head(elec_use))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "id": "wnxUVrYQB2wZ",
        "outputId": "4ee02752-73b0-4600-cd58-b1bb3106f5b4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ERROR",
          "evalue": "Error in names(elec_use)[2:56] = substr(names(elec_use)[2:56], 2, nchar(names(elec_use)[2:56])): 'names' attribute [56] must be the same length as the vector [1]\n",
          "traceback": [
            "Error in names(elec_use)[2:56] = substr(names(elec_use)[2:56], 2, nchar(names(elec_use)[2:56])): 'names' attribute [56] must be the same length as the vector [1]\nTraceback:\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "####두 개의 데이터 프레임을 병합"
      ],
      "metadata": {
        "id": "4skaorkFBdoI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "library(tidyr)"
      ],
      "metadata": {
        "id": "t_tDf08EBHgr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "elec_gen_df = gather(elec_gen, -country, key = \"year\", value = \"ElectricityGeneration\")"
      ],
      "metadata": {
        "id": "mURtZ9DLCE9l"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(head(elec_gen_df))"
      ],
      "metadata": {
        "id": "tN0BxUoTChv4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "elec_use_df = gather(elec_use, -country, key = \"year\", value = \"ElectricityUse\")"
      ],
      "metadata": {
        "id": "qFsAVnLCCQRs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(head(elec_use_df))"
      ],
      "metadata": {
        "id": "up4NCNNoCU6a"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "elec_gen_use = merge(elec_gen_df, elec_use_df)"
      ],
      "metadata": {
        "id": "e1ybgkKZCmMq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "elec_gen_use"
      ],
      "metadata": {
        "id": "kIca4XkCCuUG"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}